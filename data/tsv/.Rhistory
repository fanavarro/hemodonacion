install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("modeest")
source("https://bioconductor.org/biocLite.R")
biocLite("seqLogo")
library(seqLogo)
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
# Leer las secuencias alrededor del codon de inicio extraidas de ensembl
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
# Crear la matrix de frecuencia a partir de las secuencias
pfm = consensusMatrix(kozakContextSequences)
# Crear la matriz de peso
pwm = PWM(pfm)
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
matchPWM(pwm, ins)
seqLogo(pwm)
View(pwm)
seqLogo(t(pwm))
seqLogo(makePWM(pwm))
seqLogo(makePWM(pfm))
seqLogo(pwm)
seqLogo(pfm[1:4 , ])
View(pfm)
pfm = consensusMatrix(kozakContextSequences, as.prob = T)
pwm = PWM(pfm)
seqLogo(pfm[1:4 , ])
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = T)
View(pfm)
seqLogo(pfm[1:4 , ])
pfm = consensusMatrix(kozakContextSequences)
pwm = PWM(pfm)
View(pwm)
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
matchPWM(pwm, ins)
hits = matchPWM(pwm, ins)
summary(hits)
matchPWM(pwm, ins, with.score = T)
hits = matchPWM(pwm, ins, with.score = T)
summary(hits)
head(mcols(hits)$score)
hits$score
mcols(hits)
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
# Leer las secuencias alrededor del codon de inicio extraidas de ensembl
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
# Crear la matrix de counts a partir de las secuencias
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
# Crear la matriz de peso
pwm = PWM(pfm)
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)
hits
View(pwm)
write(pwm, file = "kozak_context.pwm")
read("kozak_context.pwm")
readBin("kozak_context.pwm")
writeBin(pwm, file = "kozak_context.pwm")
read.table("kozak_context.pwm")
read.table(file="kozak_context.pwm")
pwm
View(pwm)
write.table(pwm, file = "kozak_context.pwm")
read.table("kozak_context.pwm")
hits = matchPWM(pwm, ins, with.score = T)
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
hits = matchPWM(pwm, ins, with.score = T)
library(PWMEnrich)
pwm = PWM(pfm)
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
pwm = PWM(pfm)
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
hits
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pwm = read.table("myUtils/pwm/kozak_context.pwm")
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
View(pwm)
pwm = data.matrix(read.table("myUtils/pwm/kozak_context.pwm"))
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)
hits
as.dataframe(hits)
as.data.frame(hits)
rbind(data.frame(start=start(hits), end=end(hits)))
hits
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits)))
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits)))
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits), atg = start(hits) + ((width(hits)-3)/2)))
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits), atg = start(hits) + ((width(hits)-3)/2)))
start(hits)
a=start(hits)
mcols(hits)
score(hits)
mcols(hits)$score
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
# Leer las secuencias alrededor del codon de inicio extraidas de ensembl
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
# Crear la matriz de peso
pwm = data.matrix(read.table("myUtils/pwm/kozak_context.pwm"))
ins = "GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits), atg = start(hits) + ((width(hits)-3)/2)))
start(hits)
a=start(hits)
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
start(hits)
a=start(hits)
a=as.vector(start(hits))
ins = "GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
a=as.vector(start(hits))
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
a=c(start(hits))
ins = "GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
a=c(start(hits))
a=c()
a=c(21)
a=c(21, 22)
ins = "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)$score
a=c(start(hits))
a=start(hits)
a=is.empty(start(hits))
length(start(hits))
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
length(start(hits))
ins="GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
length(start(hits))
ins="GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)$score
length(start(hits))
ins="AAAAAAAGCGCGGCGAAAGCTAAAGGCCGGCGCACGCTGGGCGGTGGTGGTCCCTAAGCCGGGCCGCGGCCGGTGCAATGGACTCCACTGCCTGCTTGAAGTCCTTGCTCCTGACTGTCAGTCAGTACAAAGCCGTGAAGTCAGAGGCGAACGCCACTCAGCTTTTGCGGCACTTGGAGGTAATTTCTGGACAGAAACTCACACGACTATTTACATCAAATCAGATATTAACAAGTGAATGCTTGAGTTGCCTTGTAGAGCTACTTGAAGACCCCAACATAAGTGCTTCACTGATCTTAAGTATTATCGGTTTGCTGTCTCAACTAGCAGTAGACATTGAAACCAGAGATTGTCTTCAGAATACATATAATCTGAATAGTGTGCTGGCGGGAGTGGTTTGTCGGAGCAGCCACACTGATTCGGTGTTTTTGCAGTGCATTCAACTTCTACAGAAGTTAACATATAATGTCAAAATTTTCTATTCTGGTGCCAATATAGATGAATTAATTACGTTCCTGATAGATCACATTCAATCTTCTGAAGATGAGTTAAAAATGCCTTGTCTAGGATTATTGGCAAATCTTTGTCGGCACAATCTTTCTGTTCAAACGCACATAAAGACATTGAGTAATGTGAAATCTTTTTATCGAACTCTTATCACCTTGTTGGCCCATAGTAGTTTAACTGTGGTTGTGTTTGCACTTTCAATATTATCCAGTTTGACATTAAATGAAGAGGTGGGGGAAAAGCTATTCCATGCTCGAAACATTCATCAGACTTTTCAACTAATATTTAATATTCTCATAAACGGTGATGGCACTCTAACTAGAAAGTATTCAGTTGACCTACTGATGGATCTCCTTAAGAATCCTAAAATTGCTGATTATCTCACCAGATATGAGCACTTTTCTTCATGTCTTCACCAAGTATTAGGTCTTCTTAATGGAAAGGATCCTGATTCCTCTTCAAAGGTTTTAGAATTACTTCTTGCCTTCTGTTCAGTGACTCAGCTGCGCCATATGCTCACTCAGATGATGTTTGAACAGTCTCCACCTGGCAGCGCCACTCTGGGAAGCCATACTAAATGTTTAGAACCTACTGTGGCTCTACTGCGCTGGTTAAGCCAACCTTTGGACGGATCAGAAAACTGTTCTGTTTTAGCATTGGAGTTGTTCAAGGAAATATTTGAGGATGTCATAGATGCTGCTAACTGTTCCTCGGCTGATCGTTTTGTGACCCTTCTGCTGCCTACAATCCTTGATCAACTTCAGTTCACAGAACAAAATCTAGATGAGGCTTTAACAAGAAAAAAATGTGAAAGGATTGCCAAGGCCATTGAAGTTTTGTTAACTCTCTGTGGAGATGATACACTAAAAATGCATATTGCAAAAATCTTGACAACTGTCAAGTGTACCACTCTTATAGAACAACAATTTACATATGGCAAGATTGACCTGGGATTTGGAACAAAGGTTGCAGATTCTGAATTATGCAAACTTGCTGCTGATGTAATTTTGAAAACTCTTGATTTGATTAACAAACTTAAACCATTGGTTCCTGGTATGGAAGTAAGCTTCTACAAAATACTTCAGGACCCACGTTTGATTACTCCTTTGGCTTTTGCTTTAACGTCAGATAATAGAGAACAAGTACAGTCTGGACTGAGAATATTATTGGAGGCTGCTCCACTGCCAGATTTTCCTGCTTTAGTACTTGGAGAAAGTATAGCAGCAAACAATGCCTATAGACAACAGGAAACAGAACATATACCCAGAAAAATGCCCTGGCAATCATCAAATCACAGTTTTCCAACATCAATAAAGTGTTTAACTCCTCATTTGAAAGATGGTGTTCCTGGATTGAATATTGAAGAATTAATAGAGAAACTTCAGTCTGGAATGGTGGTAAAGGATCAGATTTGTGATGTGAGAATATCTGACATAATGGATGTATATGAAATGAAACTATCCACATTAGCTTCCAAAGAAAGCAGGCTACAAGATCTTTTGGAAACAAAAGCTCTAGCCCTTGCACAGGCTGATAGACTGATTGCTCAGCATCGCTGTCAAAGAACTCAAGCTGAAACAGAGGCACGGACACTTGCTAGTATGTTGAGAGAAGTTGAGAGAAAAAATGAAGAGCTTAGTGTGTTGCTGAAGGCGCAGCAAGTTGAATCAGAAAGAGCGCAGAGTGATATTGAGCATCTCTTTCAACATAATAGGAAGTTAGAGTCTGTGGCTGAAGAACATGAAATACTGACAAAATCCTACATGGAACTTCTTCAGAGAAATGAAAGTACTGAAAAGAAGAATAAAGATTTACAGATCACATGTGATTCTCTGAATAAACAAATTGAGACAGTGAAAAAGTTGAATGAGTCACTCAAGGAACAAAATGAAAAAAGTATTGCCCAATTAATAGAGAAAGAAGAACAGAGAAAAGAAGTACAGAATCAGCTAGTAGACAGAGAACATAAGCTAGCAAATTTGCATCAAAAAACAAAAGTACAAGAAGAAAAGATTAAAACCTTACAAAAGGAAAGGGAAGATAAGGAAGAAACCATTGATATCCTTAGAAAAGAATTAAGCAGAACAGAACAGATAAGAAAAGAGTTGAGCATTAAGGCTTCCTCCCTAGAGGTTCAAAAGGCACAATTAGAAGGTCGTTTGGAAGAGAAAGAGTCCTTGGTGAAACTTCAGCAAGAGGAATTGAACAAACACTCCCACATGATAGCAATGATCCACAGTTTAAGTGGTGGAAAAATAAATCCAGAAACTGTGAATCTCAGTATATAGACATTATGGCATTTTGGAATTTGTAATCTCATGATATTTTTGATGTATTTATCTATTGGAGGGGGGGTGGGTAGGGGAGTTAATTTGTGACTTCGTAACAATAAGAAGTTATTATCTAATTTAGTAAAGACCCTGATCTGTTGCATGTTTTTTATTTGATAGTTTGAATAGAAATTTAATTTTCTAAGTTTTACTTTTTGTTTCTGGCTTTTATGGCTTAAGGTTTTCTTTGGTTCTTACATTAGAAAATCATTTTTAACCTCCATTATCATTTTTCTAAGGTTCTTTCCTTTTTCTTAGTTGCTTTCTATTCTGTTTTGCCTGTCTTATTTATTCTCATTTGTGATTATTTAGATCTTAAGACCAAACTTTCTTGGTATAACAGTCCTAAAGATTACAAAATAAAAATATAGAGAGAGTAAAAGTAAAAAGTAAAGTAAAAAGAGAGAAGGTATGATTTTACTGCTAGAGAAGTTTGTCTCTGAAGAAGCACAAAAGAAAATATTAGTGAATTTAAAATAATTTTTATACTGCTGTAGCATAATTTCTAAATTTGAAAAAAATGCAATGGTAATAAAATGTATAAAAATTAGAAAACTGTCATTGTGTTAAACTATTACATTTAAATGATTACATTTAACACAATAGCTGTCTCATAAAAAATCTAAGAACTTGTAGAATTATTTGTAAGGTATATTTAGTGTTTTTTTCTCTTTTTTCAAATGTTGCATAGTGGTCCAGATCATCTATAATTAATTATAAGTTTCTTATGATTTACATAAGGATAATTTGGATTCTACTCTTGCTGCATATTCAGAAAAATATTATTTACTGTTAATTCTGATATGAATTGTATTTAATTTGTTGTCCTAATAGTTTTTAATTGGTTCATTTAATTTTAAAGCATAGGTTAAATATCTTTATTTTTTTTAAAATACAAGGGTCCTTCTGTACTTTTCATTTGAATCATATCCTCTAACTACTCTGTAAGAAACGTTTTTACATCAATATTTTGATTGATTTTATTGCTATACCAATACAGTCATTAATTTTACTTGGTGTTTTCTTCACCATATGTCTGTTTGATTTAAGTGAATTTAGATTTGTACAGTTCTGGAAATTTTTTAAAAAATATTATGCAGAGTAAAACATTTTAAATTACTATTTGTTCTATAGAGGAGATACATTCTGTTTCTCTTTTGAAATTGCATGCATTTTCAACCAAATATGAAAAAGTTTAAGTGGATAGATAAGACTGAAGAATAAAAGGGTCTATAAAA"
hits = matchPWM(pwm, ins, with.score = T)
library(PWMEnrich)
hits = matchPWM(pwm, ins, with.score = T)
setwd("/home/fabad/hemodonacion/src")
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
pwm = data.matrix(read.table("myUtils/pwm/kozak_context.pwm"))
hits = matchPWM(pwm, ins, with.score = T)
length(start(hits))
mcols(hits)$score
mcols(hits)$score
start(hits)
end(hits)
width(hits)
(start(hits) + ((width(hits)-3)/2))-1
setwd("~/hemodonacion/data/tsv")
csv = read.csv("11_12_2016.csv", sep="\t",stringsAsFactors=FALSE)
setwd("~/hemodonacion/data/tsv")
csv = read.csv("11_12_2016.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
nrow(csv)/length(unique(csv$GENE_NAME))
length(unique(csv$TRANSCRIPT_ID))
length(unique(csv$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv$VARIATION_NAME))
View(csv)
View(table(csv$GENE_NAME))
csv[csv$GENE_NAME=="PAX5",]
vIEW(csv[csv$GENE_NAME=="PAX5",])
View(csv[csv$GENE_NAME=="PAX5",])
length(unique(csv[csv$GENE_NAME=="PAX5",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="MAX",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="MAX",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="MAX",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_ID))
View(table(csv$VARIATION_TYPE))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
prop.test(m)
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvWithNoMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
length((csvWithMaf$VARIATION_NAME))
length((csvNoMaf$VARIATION_NAME))
length(unique(csvWithMaf$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csvNoMaf$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csvWithMaf$TRANSCRIPT_ID))
length(unique(csvNoMaf$TRANSCRIPT_ID))
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
length(unique(highMaf$VARIATION_NAME))
length(unique(lowMaf$VARIATION_NAME))
summary(lowMaf$MET_POSITION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVARION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
rf_conserved_met_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Lost',])
summary(lowMaf$MET_POSITION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),]
View(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),])
length(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),])
View(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),])
length(highMaf)
length(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),])
length(lowMaf)
nrow(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),])
nrow(highMaf
)
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$TRANSCRIPT_ID))
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$TRANSCRIPT_ID))
length(unique(highMaf[is.na(highMaf$TRANSCRIPT_ID),]))
length(unique(lowMaf[is.na(lowMaf$TRANSCRIPT_ID),]))
nrow(unique(highMaf[is.na(highMaf$TRANSCRIPT_ID),]))
nrow(unique(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),]))
nrow(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]))
View(csv)
View(unique(csv[c("TRANSCRIPT_ID", "SIGNAL_PEPTIDE_START", "SIGNAL_PEPTIDE_END")]))
View(unique(csvWithMaf[c("TRANSCRIPT_ID", "SIGNAL_PEPTIDE_START", "SIGNAL_PEPTIDE_END")]))
View((unique(highMaf$VARIATION_NAME)))
a=unique(highMaf$VARIATION_NAME)
length(unique(highMaf$VARIATION_NAME))
nrow(unique(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),]))
nrow(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]))
nrow(unique(lowMaf[!is.na(lowMaf$SIGNAL_PEPTIDE_START),]))
nrow(unique(highMaf$TRANSCRIPT_ID))
nrow(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(lowMaf[!is.na(lowMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(highMaf[!is.na(highMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
summary(highMaf$MET_POSITION_1)
summary(lowMaf$MET_POSITION_1)
hist(highMaf$MET_POSITION_1, xlim = c(0,1000))
hist(lowMaf$MET_POSITION_1, xlim = c(0,1000))
var.test(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1) # Varianzas distintas
var.test(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2) # Varianzas distintas
var.test(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1) # Varianzas distintas
var.test(highMaf$MET_POSITION_3, lowMaf$MET_POSITION_3) # Varianzas distintas
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylim=c(0,3000))
boxplot(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2, ylim=c(0,1500))
op <- par(mfrow = c(1, 2))
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylim=c(0,250), ylab="Posición del codón inicial (en pares de bases)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado en un contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
op <- par(mfrow = c(1, 3))
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylim=c(0,250), ylab="Posición del codón inicial (en pares de bases)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\npredicho por ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_3, lowMaf$MET_POSITION_3, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado en un contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\npredicho por ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylab="Posición del codón inicial (en pares de bases)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylab="Posición del codón inicial (en pares de bases)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2,  ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\npredicho por ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_3, lowMaf$MET_POSITION_3,  ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado en un contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
250
250
boxplot(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, ylim=c(0,250), ylab="Posición del codón inicial (en pares de bases)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\npredicho por ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_3, lowMaf$MET_POSITION_3, ylim=c(0,600), ylab="Posición del codón inicial (en pares de bases)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la posición del primer codón de inicio\nencontrado en un contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
wilcox.test(highMaf$MET_POSITION_1, lowMaf$MET_POSITION_1, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$MET_POSITION_2, lowMaf$MET_POSITION_2, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$MET_POSITION_3, lowMaf$MET_POSITION_3, paired = F, conf.level = 0.95) # Distribuciones diferentes
m = as.table(rbind(c(rf_conserved_met_low_maf,rf_lost_met_low_maf), c(rf_conserved_met_high_maf,rf_lost_met_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
rf_conserved_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Lost',])
rf_conserved_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Lost',])
rf_conserved_met2_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_2 == 'Conserved',])
rf_lost_met2_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_2 == 'Lost',])
rf_conserved_met2_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Conserved',])
rf_lost_met2_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Lost',])
rf_conserved_met3_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_3 == 'Conserved',])
rf_lost_met3_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_3 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met1_low_maf,rf_lost_met1_low_maf), c(rf_conserved_met1_high_maf,rf_lost_met1_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
m = as.table(rbind(c(rf_conserved_met2_low_maf,rf_lost_met2_low_maf), c(rf_conserved_met2_high_maf,rf_lost_met2_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
m = as.table(rbind(c(rf_conserved_met3_low_maf,rf_lost_met3_low_maf), c(rf_conserved_met3_high_maf,rf_lost_met3_high_maf)))
rf_conserved_met3_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_3 == 'Conserved',])
rf_lost_met3_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_3 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met3_low_maf,rf_lost_met3_low_maf), c(rf_conserved_met3_high_maf,rf_lost_met3_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
m = as.table(rbind(c(rf_conserved_met1_low_maf,rf_lost_met1_low_maf), c(rf_conserved_met1_high_maf,rf_lost_met1_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value menor que 0.05 indica que cada grupo de mutaciones presenta diferencias significativas
m = as.table(rbind(c(rf_conserved_met2_low_maf,rf_lost_met2_low_maf), c(rf_conserved_met2_high_maf,rf_lost_met2_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
m = as.table(rbind(c(rf_conserved_met3_low_maf,rf_lost_met3_low_maf), c(rf_conserved_met3_high_maf,rf_lost_met3_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
m = as.table(rbind(c(rf_conserved_met1_low_maf,rf_lost_met1_low_maf), c(rf_conserved_met1_high_maf,rf_lost_met1_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
View(highMaf)
rf_conserved_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Lost',])
rf_conserved_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Lost',])
rf_conserved_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met1_low_maf,rf_lost_met1_low_maf), c(rf_conserved_met1_high_maf,rf_lost_met1_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
rf_conserved_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Lost',])
rf_conserved_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_1 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met1_low_maf,rf_lost_met1_low_maf), c(rf_conserved_met1_high_maf,rf_lost_met1_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value menor que 0.05 indica que cada grupo de mutaciones presenta diferencias significativas
rf_conserved_met2_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_2 == 'Conserved',])
rf_lost_met2_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_2 == 'Lost',])
rf_conserved_met2_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Conserved',])
rf_lost_met2_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met2_low_maf,rf_lost_met2_low_maf), c(rf_conserved_met2_high_maf,rf_lost_met2_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
rf_conserved_met3_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_3 == 'Conserved',])
rf_lost_met3_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_3 == 'Lost',])
rf_conserved_met3_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_3 == 'Conserved',])
rf_lost_met3_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_3 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met3_low_maf,rf_lost_met3_low_maf), c(rf_conserved_met3_high_maf,rf_lost_met3_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1, ylab="Grado de conservacion del peptido señal",names=c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido senal\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2, ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\ncon la met de ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$MET_POSITION_3, lowMaf$MET_POSITION_3, ylim=c(0,600), ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\nusando la MET en contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1, ylab="Conservacion del peptido señal (en %)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido senal\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2, ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\ncon la met de ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3, ylim=c(0,600), ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\nusando la MET en contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1, ylab="Conservacion del peptido señal (en %)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido senal\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2, ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\ncon la met de ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3, ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\nusando la MET en contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
nrow(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
length(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
length(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
length(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
length(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
length(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
length(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
