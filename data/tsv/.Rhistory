install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
file = /home/fabad/hemodonacion/src/chanchullo
file = "/home/fabad/hemodonacion/src/chanchullo"
csv = read.csv(file,sep="\t",stringsAsFactors=FALSE)
file = "/home/fabad/hemodonacion/src/chanchullo.csv"
csv = read.csv(file,sep="\t",stringsAsFactors=FALSE)
for (i in 1:nrow(csv)){
kozak_length = csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"]
if (!is.na(kozak_length) && "" != kozak_length){
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(kozak_length, "%", sep="")
}
}
View(csv)
setwd("/home/fabad/hemodonacion/data/tsv")
write.table(csv, file = "final_out_no_filter_sup2.csv", na="", sep="\t", row.names = F)
write.table(csv, file = "final_out_no_filter2.csv", na="", sep="\t", row.names = F)
View(csv)
write.table(csv, file = "final_out_no_filter2.csv", na="", sep="\t", row.names = F)
setwd("~/hemodonacion/data/tsv")
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido seÃ±al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met >= (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak >= (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
add_mutation_type = function(csv){
for (i in 1:nrow(csv)){
codon_change = trimws(csv[i, "CODON_CHANGE"])
if (!is.na(codon_change) && "" != codon_change){
splitted = strsplit(codon_change, "/")
original = splitted[[1]][1]
mutated = splitted[[1]][2]
if(nchar(original) > nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Deletion"
} else if(nchar(original) < nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Insertion"
} else {
csv[i, "VARIATION_TYPE"] = "Nucleotid change"
}
}
}
return(csv)
}
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter2.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_mutation_type(csv)
write.table(csv, file = "final_out_no_filter_sup2.csv", na="", sep="\t", row.names = F)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
write.table(csv, file = "final_out_filter2.csv", na="", sep="\t", row.names = F)
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
nrow(csv)/length(unique(csv$GENE_NAME))
View(table(csv$VARIATION_TYPE))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS == "Conserved" & csv$MUTATED_SEQUENCE_LENGTH > 1,]); rf_met_conserved
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS == "Conserved" & csv$MUTATED_SEQUENCE_LENGTH > 1,]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS == "Lost",]) + nrow(csv[csv$READING_FRAME_STATUS == "Conserved" & csv$MUTATED_SEQUENCE_LENGTH <= 1,]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved" & csv$KOZAK_MUTATED_SEQUENCE_LENGTH > 1,]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Lost",]) + nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved" & csv$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1,]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
(10983+14124) == (11574+13533)
(17372+1120)==(17372+1344)
View(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved" & csv$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1,])
rf_kozak_lost = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Lost",]) + nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved" & !is.na(csv$KOZAK_MUTATED_SEQUENCE_LENGTH) & csv$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1,]); rf_kozak_lost
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS == "Conserved" & csv$MUTATED_SEQUENCE_LENGTH > 1,]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS == "Lost",]) + nrow(csv[csv$READING_FRAME_STATUS == "Conserved" & csv$MUTATED_SEQUENCE_LENGTH <= 1,]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved" & csv$KOZAK_MUTATED_SEQUENCE_LENGTH > 1,]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Lost",]) + nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved" & !is.na(csv$KOZAK_MUTATED_SEQUENCE_LENGTH) & csv$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1,]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
10983/(10983+14124)
14124/(10983+14124)
43.74+56.25
43.74+56.26
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
rf_conserved_met_low_maf = nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
rf_lost_met_low_maf = nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
rf_conserved_met_high_maf = nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH > 1 & highMaf$READING_FRAME_STATUS == 'Conserved',])
rf_lost_met_high_maf = nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$READING_FRAME_STATUS == 'Lost',])
rf_conserved_kozak_low_maf = nrow(lowMaf[lowMaf$KOZAK_MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',])
rf_lost_kozak_low_maf = nrow(lowMaf[lowMaf$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1 & !is.na(lowMaf$KOZAK_MUTATED_SEQUENCE_LENGTH) & lowMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$KOZAK_READING_FRAME_STATUS == 'Lost',])
rf_conserved_kozak_high_maf = nrow(highMaf[highMaf$KOZAK_MUTATED_SEQUENCE_LENGTH > 1 & highMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',])
rf_lost_kozak_high_maf = nrow(highMaf[highMaf$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$KOZAK_READING_FRAME_STATUS == 'Lost',])
m = as.table(rbind(c(rf_conserved_met_low_maf,rf_lost_met_low_maf), c(rf_conserved_met_high_maf,rf_lost_met_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
m = as.table(rbind(c(rf_conserved_kozak_low_maf,rf_lost_kozak_low_maf), c(rf_conserved_kozak_high_maf,rf_lost_kozak_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
168+10
10/(168+10)
168/(168+10)
94.38+5.62
94.49+6.38
2178/(2178+127)
127/(2178+127)
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
high_maf_signal_values_kozak = table(highMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
low_maf_signal_values_kozak = table(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
m = as.table(rbind(c(low_maf_signal_values_kozak), c(high_maf_signal_values_kozak)))
rownames(m) = c("MAF BAJA","MAF ALTA")
m
high_maf_signal_values_met = table(highMaf$SIGNAL_FIRST_MET_AFFECTED)
low_maf_signal_values_met = table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
m = as.table(rbind(c(low_maf_signal_values_met), c(high_maf_signal_values_met)))
rownames(m) = c("MAF BAJA","MAF ALTA")
m
View(highMaf)
highMaf[highMaf$GENE_NAME=="TLR8"]
highMaf[highMaf$GENE_NAME=="TLR8",]
highMaf[highMaf$GENE_NAME=="TLR8",]$PUBLICATIONS
View(lowMaf)
library(gdata)
library(hash)
search = function(database, xls){
found = read.table(text="", col.names = colnames(database))
# Si el xlsx tiene entrada para dbsnp e id de refseq
if("dbsnp" %in% colnames(xls) && "transcript" %in% colnames(xls)){
for (i in 1:nrow(xls)){
dbsnpString = toString(xls[i, "dbsnp"])
dbsnps = strsplit(dbsnpString, ":")
refseq_id = toString(xls[i,"transcript"])
for(i in 1:length(dbsnps[[1]])){
dbsnp = dbsnps[[1]][i]
entry = database[database$TRANSCRIPT_REFSEQ_ID == refseq_id &
!is.na(database$TRANSCRIPT_REFSEQ_ID) &
database$VARIATION_NAME == dbsnp &
!is.na(database$VARIATION_NAME), ]
if (!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
break
}
}
}
}
return(found)
}
filter_xls = function(xls){
xls = filter_coverage_xls(xls)
xls = filter_protein_pos_xls(xls)
return(xls)
}
filter_coverage_xls = function(xls){
minCoverage = 20
# Filter by coverage and quality
if ("coverage" %in% colnames(xls)){
xls = xls[!is.na(xls$coverage) & xls$coverage >= minCoverage,]
}
return(xls)
}
filter_protein_pos_xls = function(xls){
# Filter the position affected by the mutation
if("proteinPos" %in% colnames(xls)){
xls = xls[!is.na(xls$proteinPos) & xls$proteinPos == 1,]
} else if ("protein" %in% colnames(xls)){
index = with(xls, grepl("p.Met1[a-zA-Z]", protein))
xls = xls[index,]
}
return(xls)
}
get_gene_names = function(xls){
if("gene" %in% colnames(xls)){
return(sort(xls$gene))
}
}
get_dbsnp_ids = function(xls){
if("dbsnp" %in% colnames(xls)){
return(sort(xls[!is.na(xls$dbsnp), "dbsnp"]))
}
}
exomes_dir = "~/hemodonacion/data/exomes/"
exome_files = c("14-173.xlsx",
"2064.xlsx",
"ABGP.xlsx",
"Exoma 2166 nuevo.xlsx",
"Paqui.xlsx")
exome_tables = hash()
# Read xlsx files and store it in a hash
for (file in exome_files){
abs_file_dir = paste(exomes_dir, file, sep="")
exome_tables[file] = read.xls(abs_file_dir)
write(paste("exoma", file, "leido."), "")
}
# filter coverage
for (file in exome_files){
exome_tables[file] = filter_coverage_xls(exome_tables[[file]])
}
# Mutaciones totales por paciente
nrow(exome_tables[["14-173.xlsx"]])
nrow(exome_tables[["2064.xlsx"]])
nrow(exome_tables[["ABGP.xlsx"]])
nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]])
nrow(exome_tables[["Paqui.xlsx"]])
mean(c(nrow(exome_tables[["14-173.xlsx"]]),nrow(exome_tables[["2064.xlsx"]]),nrow(exome_tables[["ABGP.xlsx"]]),nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]]),nrow(exome_tables[["Paqui.xlsx"]])))
# filter protein pos
for (file in exome_files){
exome_tables[file] = filter_protein_pos_xls(exome_tables[[file]])
}
# Mutaciones en met1 por paciente
nrow(exome_tables[["14-173.xlsx"]])
nrow(exome_tables[["2064.xlsx"]])
nrow(exome_tables[["ABGP.xlsx"]])
nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]])
nrow(exome_tables[["Paqui.xlsx"]])
mean(c(nrow(exome_tables[["14-173.xlsx"]]),nrow(exome_tables[["2064.xlsx"]]),nrow(exome_tables[["ABGP.xlsx"]]),nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]]),nrow(exome_tables[["Paqui.xlsx"]])))
View(search(csv, exome_tables[["14-173.xlsx"]]))
View(exome_tables[["ABGP.xlsx"]])
1440*100/1506
