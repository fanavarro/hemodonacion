install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
setwd("~/hemodonacion/data/tsv")
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido seÃ±al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met >= (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak >= (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
add_mutation_type = function(csv){
for (i in 1:nrow(csv)){
codon_change = trimws(csv[i, "CODON_CHANGE"])
if (!is.na(codon_change) && "" != codon_change){
splitted = strsplit(codon_change, "/")
original = splitted[[1]][1]
mutated = splitted[[1]][2]
if(nchar(original) > nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Deletion"
} else if(nchar(original) < nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Insertion"
} else {
csv[i, "VARIATION_TYPE"] = "Nucleotid change"
}
}
}
return(csv)
}
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_mutation_type(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
library(gdata)
library(hash)
search = function(database, xls){
found = read.table(text="", col.names = colnames(database))
# Si el xlsx tiene entrada para dbsnp e id de refseq
if("dbsnp" %in% colnames(xls) && "transcript" %in% colnames(xls)){
for (i in 1:nrow(xls)){
dbsnpString = toString(xls[i, "dbsnp"])
dbsnps = strsplit(dbsnpString, ":")
refseq_id = toString(xls[i,"transcript"])
for(i in 1:length(dbsnps[[1]])){
dbsnp = dbsnps[[1]][i]
entry = database[database$TRANSCRIPT_REFSEQ_ID == refseq_id &
!is.na(database$TRANSCRIPT_REFSEQ_ID) &
database$VARIATION_NAME == dbsnp &
!is.na(database$VARIATION_NAME), ]
if (!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
break
}
}
}
}
return(found)
}
filter_xls = function(xls){
xls = filter_coverage_xls(xls)
xls = filter_protein_pos_xls(xls)
return(xls)
}
filter_coverage_xls = function(xls){
minCoverage = 20
# Filter by coverage and quality
if ("coverage" %in% colnames(xls)){
xls = xls[!is.na(xls$coverage) & xls$coverage >= minCoverage,]
}
return(xls)
}
filter_protein_pos_xls = function(xls){
# Filter the position affected by the mutation
if("proteinPos" %in% colnames(xls)){
xls = xls[!is.na(xls$proteinPos) & xls$proteinPos == 1,]
} else if ("protein" %in% colnames(xls)){
index = with(xls, grepl("p.Met1[a-zA-Z]", protein))
xls = xls[index,]
}
return(xls)
}
get_gene_names = function(xls){
if("gene" %in% colnames(xls)){
return(sort(xls$gene))
}
}
get_dbsnp_ids = function(xls){
if("dbsnp" %in% colnames(xls)){
return(sort(xls[!is.na(xls$dbsnp), "dbsnp"]))
}
}
exomes_dir = "~/hemodonacion/data/exomes/"
exome_files = c("14-173.xlsx",
"2064.xlsx",
"ABGP.xlsx",
"Exoma 2166 nuevo.xlsx",
"Paqui.xlsx")
exome_tables = hash()
# Read xlsx files and store it in a hash
for (file in exome_files){
abs_file_dir = paste(exomes_dir, file, sep="")
exome_tables[file] = read.xls(abs_file_dir)
write(paste("exoma", file, "leido."), "")
}
# filter coverage
for (file in exome_files){
exome_tables[file] = filter_coverage_xls(exome_tables[[file]])
}
# Mutaciones totales por paciente
nrow(exome_tables[["14-173.xlsx"]])
nrow(exome_tables[["2064.xlsx"]])
nrow(exome_tables[["ABGP.xlsx"]])
nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]])
nrow(exome_tables[["Paqui.xlsx"]])
mean(c(nrow(exome_tables[["14-173.xlsx"]]),nrow(exome_tables[["2064.xlsx"]]),nrow(exome_tables[["ABGP.xlsx"]]),nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]]),nrow(exome_tables[["Paqui.xlsx"]])))
# filter protein pos
for (file in exome_files){
exome_tables[file] = filter_protein_pos_xls(exome_tables[[file]])
}
# Mutaciones en met1 por paciente
nrow(exome_tables[["14-173.xlsx"]])
nrow(exome_tables[["2064.xlsx"]])
nrow(exome_tables[["ABGP.xlsx"]])
nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]])
nrow(exome_tables[["Paqui.xlsx"]])
mean(c(nrow(exome_tables[["14-173.xlsx"]]),nrow(exome_tables[["2064.xlsx"]]),nrow(exome_tables[["ABGP.xlsx"]]),nrow(exome_tables[["Exoma 2166 nuevo.xlsx"]]),nrow(exome_tables[["Paqui.xlsx"]])))
# get genes
genes = c()
for (file in exome_files){
genes = c(genes, as.vector(get_gene_names(exome_tables[[file]])))
}
# get dbsnp ids
dbsnp_ids = c()
for (file in exome_files){
dbsnp_ids = c(dbsnp_ids, as.vector(get_dbsnp_ids(exome_tables[[file]])))
}
# Numero de genes afectados entre todos los pacientes.
length(unique(genes))
# gene frequency
get_gene_names(exome_tables[["14-173.xlsx"]])
View(search(csv, exome_tables[["14-173.xlsx"]]))
View(exome_tables[["14-173.xlsx"]])
957-60+1
898*0.9375
/7
898*0.9375/7
900*0.9375/9
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.numeric(gsub("%","",csv[i, "MUTATED_SEQUENCE_LENGTH"]))
#met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = (kozak_seq_length + 2) * met_percentage / (met_seq_length+2)
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(kozak_mutated_seq_length, "%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
View(exome_tables[["14-173.xlsx"]])
View(search(csv, exome_tables[["14-173.xlsx"]]))
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 3
met_percentage = as.numeric(gsub("%","",csv[i, "MUTATED_SEQUENCE_LENGTH"]))
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 3
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = (kozak_seq_length) * met_percentage / (met_seq_length)
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(kozak_mutated_seq_length, "%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 3
met_percentage = as.numeric(gsub("%","",csv[i, "MUTATED_SEQUENCE_LENGTH"]))
#met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 3
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = (kozak_seq_length) * met_percentage / (met_seq_length)
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(kozak_mutated_seq_length, "%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
View(search(csv, exome_tables[["14-173.xlsx"]]))
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 3
met_percentage = as.numeric(gsub("%","",csv[i, "MUTATED_SEQUENCE_LENGTH"]))
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 3
cat("\n")
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = (kozak_seq_length) * met_percentage / (met_seq_length)
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(kozak_mutated_seq_length, "%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
View(prueba)
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
View(prueba)
warnings()
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
setwd("~/hemodonacion/data/tsv")
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
prueba$KOZAK_MUTATED_SEQUENCE_LENGTH
source('~/p.R')
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
debugSource('~/p.R')
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
prueba$KOZAK_MUTATED_SEQUENCE_LENGTH
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
prueba = add_kozak_mutated_seq_length(search(csv, exome_tables[["14-173.xlsx"]]))
prueba$KOZAK_MUTATED_SEQUENCE_LENGTH
csv = add_kozak_mutated_seq_length(csv)
warnings()
debugSource('~/p.R')
csv = add_kozak_mutated_seq_length(csv)
View(search(csv, exome_tables[["14-173.xlsx"]]))
9000/96
myvars=c("FIRST_MET_POS","STOP_CODON_POSIION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH")
View(csv[myvars])
myvars=c("FIRST_MET_POSITION","STOP_CODON_POSIION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH")
View(csv[myvars])
myvars <- c("TRANSCRIPT_ID","FIRST_MET_POSITION","STOP_CODON_POSITION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH", "KOZAK_STOP_CODON", "KOZAK_READING_FRAME_STATUS")
View(csv[myvars])
View(exome_tables[["14-173.xlsx"]])
View(exome_tables[["2064.xlsx"]])
View(exome_tables[["ABGP.xlsx"]])
View(exome_tables[["Exoma 2166 nuevo.xlsx"]])
View(exome_tables[["Paqui.xlsx"]])
