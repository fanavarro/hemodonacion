seqLogo(pfm[1:4 , ])
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = T)
View(pfm)
seqLogo(pfm[1:4 , ])
pfm = consensusMatrix(kozakContextSequences)
pwm = PWM(pfm)
View(pwm)
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
matchPWM(pwm, ins)
hits = matchPWM(pwm, ins)
summary(hits)
matchPWM(pwm, ins, with.score = T)
hits = matchPWM(pwm, ins, with.score = T)
summary(hits)
head(mcols(hits)$score)
hits$score
mcols(hits)
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
# Leer las secuencias alrededor del codon de inicio extraidas de ensembl
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
# Crear la matrix de counts a partir de las secuencias
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
# Crear la matriz de peso
pwm = PWM(pfm)
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)
hits
View(pwm)
write(pwm, file = "kozak_context.pwm")
read("kozak_context.pwm")
readBin("kozak_context.pwm")
writeBin(pwm, file = "kozak_context.pwm")
read.table("kozak_context.pwm")
read.table(file="kozak_context.pwm")
pwm
View(pwm)
write.table(pwm, file = "kozak_context.pwm")
read.table("kozak_context.pwm")
hits = matchPWM(pwm, ins, with.score = T)
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
hits = matchPWM(pwm, ins, with.score = T)
library(PWMEnrich)
pwm = PWM(pfm)
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
pwm = PWM(pfm)
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
hits
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pwm = read.table("myUtils/pwm/kozak_context.pwm")
# Secuencia de prueba sobre la que buscar matches
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
View(pwm)
pwm = data.matrix(read.table("myUtils/pwm/kozak_context.pwm"))
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)
hits
as.dataframe(hits)
as.data.frame(hits)
rbind(data.frame(start=start(hits), end=end(hits)))
hits
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits)))
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits)))
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits), atg = start(hits) + ((width(hits)-3)/2)))
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits), atg = start(hits) + ((width(hits)-3)/2)))
start(hits)
a=start(hits)
mcols(hits)
score(hits)
mcols(hits)$score
library(PWMEnrich)
setwd("/home/fabad/hemodonacion/src")
# Leer las secuencias alrededor del codon de inicio extraidas de ensembl
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
# Crear la matriz de peso
pwm = data.matrix(read.table("myUtils/pwm/kozak_context.pwm"))
ins = "GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
rbind(data.frame(start=start(hits), end=end(hits), width=width(hits), score=mcols(hits), atg = start(hits) + ((width(hits)-3)/2)))
start(hits)
a=start(hits)
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
start(hits)
a=start(hits)
a=as.vector(start(hits))
ins = "GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
a=as.vector(start(hits))
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
a=c(start(hits))
ins = "GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
a=c(start(hits))
a=c()
a=c(21)
a=c(21, 22)
ins = "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)$score
a=c(start(hits))
a=start(hits)
a=is.empty(start(hits))
length(start(hits))
ins = "TCTGCCCCACCCTGTCCTCTGGAACCTCTGCGAGATTTAGAGGAAAGAACCAGTTTTCAGGCGGATTGCCTCAGATCACACTATCTCCACTTGCCCAGCCCTGTGGAAGATTAGCGGCCATGTATTCCAATGTGATAGGAACTGTAACCTCTGGAAAAAGGAAGGTTTATCTTTTGTCCTTGCTGCTCATTGGCTTCTGGGACTGCGTGACCTGTCACGGGAGCCCTGTGGACATCTGCACAGCCAAGCCGCGGGACATTCCCATGAATCCCATGTGCATTTACCGCTCCCCGGAGAAGAAGGCAACTGAGGATGAGGGCTCAGAACAGAAGATCCCGGAGGCCACCAACCGGCGTGTCTGGGAACTGTCCAAGGCCAATTCCCGCTTTGCTACCACTTTCTATCAGCACCTGGCAGATTCCAAGAATGACAATGATAACATTTTCCTGTCACCCCTGAGTATCTCCACGGCTTTTGCTATGACCAAGCTGGGTGCCTGTAATGACACCCTCCAGCAACTGATGGAGGTATTTAAGTTTGACACCATATCTGAGAAAACATCTGATCAGATCCACTTCTTCTTTGCCAAACTGAACTGCCGACTCTATCGAAAAGCCAACAAATCCTCCAAGTTAGTATCAGCCAATCGCCTTTTTGGAGACAAATCCCTTACCTTCAATGAGACCTACCAGGACATCAGTGAGTTGGTATATGGAGCCAAGCTCCAGCCCCTGGACTTCAAGGAAAATGCAGAGCAATCCAGAGCGGCCATCAACAAATGGGTGTCCAATAAGACCGAAGGCCGAATCACCGATGTCATTCCCTCGGAAGCCATCAATGAGCTCACTGTTCTGGTGCTGGTTAACACCATTTACTTCAAGGGCCTGTGGAAGTCAAAGTTCAGCCCTGAGAACACAAGGAAGGAACTGTTCTACAAGGCTGATGGAGAGTCGTGTTCAGCATCTATGATGTACCAGGAAGGCAAGTTCCGTTATCGGCGCGTGGCTGAAGGCACCCAGGTGCTTGAGTTGCCCTTCAAAGGTGATGACATCACCATGGTCCTCATCTTGCCCAAGCCTGAGAAGAGCCTGGCCAAGGTAGAGAAGGAACTCACCCCAGAGGTGCTGCAAGAGTGGCTGGATGAATTGGAGGAGATGATGCTGGTGGTCCACATGCCCCGCTTCCGCATTGAGGACGGCTTCAGTTTGAAGGAGCAGCTGCAAGACATGGGCCTTGTCGATCTGTTCAGCCCTGAAAAGTCCAAACTCCCAGGTATTGTTGCAGAAGGCCGAGATGACCTCTATGTCTCAGATGCATTCCATAAGGCATTTCTTGAGGTAAATGAAGAAGGCAGTGAAGCAGCTGCAAGTACCGCTGTTGTGATTGCTGGCCGTTCGCTAAACCCCAACAGGGTGACTTTCAAGGCCAACAGGCCTTTCCTGGTTTTTATAAGAGAAGTTCCTCTGAACACTATTATCTTCATGGGCAGAGTAGCCAACCCTTGTGTTAAGTAAAATGTTCTTATTCTTTGCACCTCTTCCTATTTTTGGTTTGTGAACAGAAGTAAAAATAAATACAAACTACTTCCATCTCA"
hits = matchPWM(pwm, ins, with.score = T)
length(start(hits))
ins="GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
length(start(hits))
ins="GGCATGGCGGCCAGGCAGATCTGGGCACGGACGGGTGCCGCGCTCTGCAGGCAACCTTCCGCCGCCCCGCCGCCAGCACCTCTCTGGGTAAGAGCTGGGTTCCGACAGCAGCTCAGCTTAACCCTCTGCCCTGCTAACGAGGGAAACTGCGGCGGCTCCGCGCCCAGCACGCCCGGTAGGCCGGAGAGAGCGGCGAGGCCTTCGGTGAGCGAAGAGTTAACCGCGGCGGAGCGACAGATCGCGGAGCTGCACGCTGCCGCCTGCGCGGCTGGCCAGCTAAACTATGTGGATCCAGCTACTGGCTATGTGGTGCTCACACAGATTGCCCACTTGCAAAGAGGTGAATGTTGTGGCTCTGCGTGCAGACATTGTCCATATGGTCAAGTCAATGTTAAAGATCCATCTAAAAAGAAGCAATTCAATTCATATTTTTATGTTTGACAAGAATTTCATCTCTGTTCCCTAACTGTGCTTGTATTTTTTAAAAAATAAAGCCCCAATTCAGAATTGCTGGATTATTAGTACTTGAACACTAGTTTAATCCTAAATACATATATTAAAAGAACATCAATAAAATGAAAAAGCTAA"
hits = matchPWM(pwm, ins, with.score = T)
mcols(hits)$score
length(start(hits))
ins="AAAAAAAGCGCGGCGAAAGCTAAAGGCCGGCGCACGCTGGGCGGTGGTGGTCCCTAAGCCGGGCCGCGGCCGGTGCAATGGACTCCACTGCCTGCTTGAAGTCCTTGCTCCTGACTGTCAGTCAGTACAAAGCCGTGAAGTCAGAGGCGAACGCCACTCAGCTTTTGCGGCACTTGGAGGTAATTTCTGGACAGAAACTCACACGACTATTTACATCAAATCAGATATTAACAAGTGAATGCTTGAGTTGCCTTGTAGAGCTACTTGAAGACCCCAACATAAGTGCTTCACTGATCTTAAGTATTATCGGTTTGCTGTCTCAACTAGCAGTAGACATTGAAACCAGAGATTGTCTTCAGAATACATATAATCTGAATAGTGTGCTGGCGGGAGTGGTTTGTCGGAGCAGCCACACTGATTCGGTGTTTTTGCAGTGCATTCAACTTCTACAGAAGTTAACATATAATGTCAAAATTTTCTATTCTGGTGCCAATATAGATGAATTAATTACGTTCCTGATAGATCACATTCAATCTTCTGAAGATGAGTTAAAAATGCCTTGTCTAGGATTATTGGCAAATCTTTGTCGGCACAATCTTTCTGTTCAAACGCACATAAAGACATTGAGTAATGTGAAATCTTTTTATCGAACTCTTATCACCTTGTTGGCCCATAGTAGTTTAACTGTGGTTGTGTTTGCACTTTCAATATTATCCAGTTTGACATTAAATGAAGAGGTGGGGGAAAAGCTATTCCATGCTCGAAACATTCATCAGACTTTTCAACTAATATTTAATATTCTCATAAACGGTGATGGCACTCTAACTAGAAAGTATTCAGTTGACCTACTGATGGATCTCCTTAAGAATCCTAAAATTGCTGATTATCTCACCAGATATGAGCACTTTTCTTCATGTCTTCACCAAGTATTAGGTCTTCTTAATGGAAAGGATCCTGATTCCTCTTCAAAGGTTTTAGAATTACTTCTTGCCTTCTGTTCAGTGACTCAGCTGCGCCATATGCTCACTCAGATGATGTTTGAACAGTCTCCACCTGGCAGCGCCACTCTGGGAAGCCATACTAAATGTTTAGAACCTACTGTGGCTCTACTGCGCTGGTTAAGCCAACCTTTGGACGGATCAGAAAACTGTTCTGTTTTAGCATTGGAGTTGTTCAAGGAAATATTTGAGGATGTCATAGATGCTGCTAACTGTTCCTCGGCTGATCGTTTTGTGACCCTTCTGCTGCCTACAATCCTTGATCAACTTCAGTTCACAGAACAAAATCTAGATGAGGCTTTAACAAGAAAAAAATGTGAAAGGATTGCCAAGGCCATTGAAGTTTTGTTAACTCTCTGTGGAGATGATACACTAAAAATGCATATTGCAAAAATCTTGACAACTGTCAAGTGTACCACTCTTATAGAACAACAATTTACATATGGCAAGATTGACCTGGGATTTGGAACAAAGGTTGCAGATTCTGAATTATGCAAACTTGCTGCTGATGTAATTTTGAAAACTCTTGATTTGATTAACAAACTTAAACCATTGGTTCCTGGTATGGAAGTAAGCTTCTACAAAATACTTCAGGACCCACGTTTGATTACTCCTTTGGCTTTTGCTTTAACGTCAGATAATAGAGAACAAGTACAGTCTGGACTGAGAATATTATTGGAGGCTGCTCCACTGCCAGATTTTCCTGCTTTAGTACTTGGAGAAAGTATAGCAGCAAACAATGCCTATAGACAACAGGAAACAGAACATATACCCAGAAAAATGCCCTGGCAATCATCAAATCACAGTTTTCCAACATCAATAAAGTGTTTAACTCCTCATTTGAAAGATGGTGTTCCTGGATTGAATATTGAAGAATTAATAGAGAAACTTCAGTCTGGAATGGTGGTAAAGGATCAGATTTGTGATGTGAGAATATCTGACATAATGGATGTATATGAAATGAAACTATCCACATTAGCTTCCAAAGAAAGCAGGCTACAAGATCTTTTGGAAACAAAAGCTCTAGCCCTTGCACAGGCTGATAGACTGATTGCTCAGCATCGCTGTCAAAGAACTCAAGCTGAAACAGAGGCACGGACACTTGCTAGTATGTTGAGAGAAGTTGAGAGAAAAAATGAAGAGCTTAGTGTGTTGCTGAAGGCGCAGCAAGTTGAATCAGAAAGAGCGCAGAGTGATATTGAGCATCTCTTTCAACATAATAGGAAGTTAGAGTCTGTGGCTGAAGAACATGAAATACTGACAAAATCCTACATGGAACTTCTTCAGAGAAATGAAAGTACTGAAAAGAAGAATAAAGATTTACAGATCACATGTGATTCTCTGAATAAACAAATTGAGACAGTGAAAAAGTTGAATGAGTCACTCAAGGAACAAAATGAAAAAAGTATTGCCCAATTAATAGAGAAAGAAGAACAGAGAAAAGAAGTACAGAATCAGCTAGTAGACAGAGAACATAAGCTAGCAAATTTGCATCAAAAAACAAAAGTACAAGAAGAAAAGATTAAAACCTTACAAAAGGAAAGGGAAGATAAGGAAGAAACCATTGATATCCTTAGAAAAGAATTAAGCAGAACAGAACAGATAAGAAAAGAGTTGAGCATTAAGGCTTCCTCCCTAGAGGTTCAAAAGGCACAATTAGAAGGTCGTTTGGAAGAGAAAGAGTCCTTGGTGAAACTTCAGCAAGAGGAATTGAACAAACACTCCCACATGATAGCAATGATCCACAGTTTAAGTGGTGGAAAAATAAATCCAGAAACTGTGAATCTCAGTATATAGACATTATGGCATTTTGGAATTTGTAATCTCATGATATTTTTGATGTATTTATCTATTGGAGGGGGGGTGGGTAGGGGAGTTAATTTGTGACTTCGTAACAATAAGAAGTTATTATCTAATTTAGTAAAGACCCTGATCTGTTGCATGTTTTTTATTTGATAGTTTGAATAGAAATTTAATTTTCTAAGTTTTACTTTTTGTTTCTGGCTTTTATGGCTTAAGGTTTTCTTTGGTTCTTACATTAGAAAATCATTTTTAACCTCCATTATCATTTTTCTAAGGTTCTTTCCTTTTTCTTAGTTGCTTTCTATTCTGTTTTGCCTGTCTTATTTATTCTCATTTGTGATTATTTAGATCTTAAGACCAAACTTTCTTGGTATAACAGTCCTAAAGATTACAAAATAAAAATATAGAGAGAGTAAAAGTAAAAAGTAAAGTAAAAAGAGAGAAGGTATGATTTTACTGCTAGAGAAGTTTGTCTCTGAAGAAGCACAAAAGAAAATATTAGTGAATTTAAAATAATTTTTATACTGCTGTAGCATAATTTCTAAATTTGAAAAAAATGCAATGGTAATAAAATGTATAAAAATTAGAAAACTGTCATTGTGTTAAACTATTACATTTAAATGATTACATTTAACACAATAGCTGTCTCATAAAAAATCTAAGAACTTGTAGAATTATTTGTAAGGTATATTTAGTGTTTTTTTCTCTTTTTTCAAATGTTGCATAGTGGTCCAGATCATCTATAATTAATTATAAGTTTCTTATGATTTACATAAGGATAATTTGGATTCTACTCTTGCTGCATATTCAGAAAAATATTATTTACTGTTAATTCTGATATGAATTGTATTTAATTTGTTGTCCTAATAGTTTTTAATTGGTTCATTTAATTTTAAAGCATAGGTTAAATATCTTTATTTTTTTTAAAATACAAGGGTCCTTCTGTACTTTTCATTTGAATCATATCCTCTAACTACTCTGTAAGAAACGTTTTTACATCAATATTTTGATTGATTTTATTGCTATACCAATACAGTCATTAATTTTACTTGGTGTTTTCTTCACCATATGTCTGTTTGATTTAAGTGAATTTAGATTTGTACAGTTCTGGAAATTTTTTAAAAAATATTATGCAGAGTAAAACATTTTAAATTACTATTTGTTCTATAGAGGAGATACATTCTGTTTCTCTTTTGAAATTGCATGCATTTTCAACCAAATATGAAAAAGTTTAAGTGGATAGATAAGACTGAAGAATAAAAGGGTCTATAAAA"
hits = matchPWM(pwm, ins, with.score = T)
library(PWMEnrich)
hits = matchPWM(pwm, ins, with.score = T)
setwd("/home/fabad/hemodonacion/src")
kozakContextSequences = readDNAStringSet("kozaks2.fasta", format = "fasta")
pfm = consensusMatrix(kozakContextSequences, as.prob = F)
pwm = data.matrix(read.table("myUtils/pwm/kozak_context.pwm"))
hits = matchPWM(pwm, ins, with.score = T)
length(start(hits))
mcols(hits)$score
mcols(hits)$score
start(hits)
end(hits)
width(hits)
(start(hits) + ((width(hits)-3)/2))-1
wilcox.test(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1, paired = F, conf.level = 0.95) # Distribuciones diferentes
setwd("~/hemodonacion/data/tsv")
csv = read.csv("11_12_2016.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
nrow(csv)/length(unique(csv$GENE_NAME))
length(unique(csv$TRANSCRIPT_ID))
length(unique(csv$VARIATION_NAME))
length(unique(csv$TRANSCRIPT_VARIATION_ALLELE_DBID))
csv[is.na(csv$TRANSCRIPT_VARIATION_ALLELE_DBID),]
View(table(csv$TRANSCRIPT_VARIATION_ALLELE_DBID))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Numero de variantes
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Numero de variantes
length(unique(highMaf$VARIATION_NAME))
length(unique(lowMaf$VARIATION_NAME))
# Numero de transcritos afectados
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$TRANSCRIPT_ID))
# Numero de transcritos sin peptido senal detectado
length(unique(highMaf[is.na(highMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
length(unique(lowMaf[is.na(lowMaf$SIGNAL_PEPTIDE_START),]$TRANSCRIPT_ID))
rf_conserved_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_1 == 'Lost',])
rf_conserved_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_1 == 'Conserved',])
rf_lost_met1_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_1 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met1_low_maf,rf_lost_met1_low_maf), c(rf_conserved_met1_high_maf,rf_lost_met1_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
rf_conserved_met2_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_2 == 'Conserved',])
rf_lost_met2_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_2 == 'Lost',])
rf_conserved_met2_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Conserved',])
rf_lost_met2_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_2 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met2_low_maf,rf_lost_met2_low_maf), c(rf_conserved_met2_high_maf,rf_lost_met2_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
# MET3 READING FRAME STATUS
rf_conserved_met3_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_3 == 'Conserved',])
rf_lost_met3_high_maf = nrow(highMaf[highMaf$READING_FRAME_STATUS_3 == 'Lost',])
rf_conserved_met3_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_3 == 'Conserved',])
rf_lost_met3_low_maf = nrow(lowMaf[lowMaf$READING_FRAME_STATUS_3 == 'Lost',])
m = as.table(rbind(c(rf_conserved_met3_low_maf,rf_lost_met3_low_maf), c(rf_conserved_met3_high_maf,rf_lost_met3_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
summary(m)
summary(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
length(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
length(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
1446+1158
87-74
1446-1158
length(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
length(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
1446-1222
length(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
87-74
length(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
1446-1162
74+13
1158+288
1222+288
1222+224
1162+284
View(highMaf)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
summary(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
wilcox.test(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3, paired = F, conf.level = 0.95) # Distribuciones diferentes
225+60+24
var.test(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
t.test(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3, paired = F, conf.level = 0.95) # Distribuciones diferentes
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1, ylab="Conservacion del peptido señal (en %)",names=c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido senal\nencontrado entre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2, ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\ncon la met de ATGpr con score > 0.25\nentre los grupos de MAF alta y baja.")
boxplot(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3, lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3, ylab="Conservacion del peptido señal (en %)", names = c("MAF alta", "MAF baja"),
main="Comparativa de la conservacion del peptido señal\nusando la MET en contexto de Kozak fuerte\nentre los grupos de MAF alta y baja.")
hist(highMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
hist(highMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
hist(highMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
hist(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_1)
hist(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_2)
hist(lowMaf$SIGNAL_PEPTIDE_CONSERVATION_3)
colnames(csv)
nrow(csv)
csv$CDS_COORDS
csv$CDS_COORDS[5]
csv$CDS_COORDS[6]
csv$CDS_COORDS[21]
strsplit(csv$CDS_COORDS[21], "-")
interval = strsplit(csv$CDS_COORDS[21], "-")
interval[1]
interval[[1]]
interval[[1]][[1]]
interval[[1]][[2]]
interval[1][2]
a="1"
a
as.numeric(a)
as.numeric(a)+5
a + 5
a = c()
a = c(a, highMaf[1])
a
a = c()
a = c(a, highMaf[1,])
a
a = c(a, highMaf[2,])
a = rbind(highMaf[2,])
a = rbind(highMaf[1,])
a = rbind(highMaf[2,])
a = rbind(highMaf[5,])
View(a)
a = rbind(highMaf[100,])
a = rbind(highMaf[50,])
a = rbind(a, highMaf[10,])
highMaf[1,]
cbind(highMaf[1,], AFFECTED_POS=1)
View(cbind(highMaf[1,], AFFECTED_POS=1))
rowsHighMaf = c()
rowsLowMaf = c()
for (i in range(nrow(highMaf))){
if (is.na(highMaf$CDS_COORDS[i])){
next
}
interval = strsplit(highMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
rowsHighMaf = rbind(rowsHighMaf, cbind(highMaf[i,], AFFECTED_POS = begin))
}
}
View(rowsHighMaf)
myvars=c("CDS_COORDS")
View(highMaf[myvars])
range(nrow(highMaf))
range(nrow(highMaf))
(nrow(highMaf))
1:(nrow(highMaf))
rowsHighMaf = c()
rowsLowMaf = c()
for (i in 1:(nrow(highMaf))){
if (is.na(highMaf$CDS_COORDS[i])){
next
}
interval = strsplit(highMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
rowsHighMaf = rbind(rowsHighMaf, cbind(highMaf[i,], AFFECTED_POS = begin))
}
}
rowsHighMaf = c()
rowsLowMaf = c()
for (i in 1:(nrow(highMaf))){
if (is.na(highMaf$CDS_COORDS[i]) || highMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(highMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
rowsHighMaf = rbind(rowsHighMaf, cbind(highMaf[i,], AFFECTED_POS = begin))
}
}
myvars=c("CDS_COORDS", "AFFECTED_POS")
View(rowsHighMaf[myvars])
nrows(rowsHighMaf)
nrow(rowsHighMaf)
nrow(highMaf)
myvars=c("TRANSCRIPT_ID", "VARIATION_NAME", "CDS_COORDS", "AFFECTED_POS")
View(rowsHighMaf[myvars])
rowsLowMaf = c()
for (i in 1:(nrow(lowMaf))){
if (is.na(lowMaf$CDS_COORDS[i]) || lowMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(lowMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
rowsLowMaf = rbind(rowsLowMaf, cbind(lowMaf[i,], AFFECTED_POS = begin))
}
}
View(rowsLowMaf[myvars])
for (i in 1:(nrow(highMaf))){
if (is.na(highMaf$CDS_COORDS[i]) || highMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(highMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
affectedPosHighMaf = rbind(rowsHighMaf, cbind(highMaf[i,], AFFECTED_POS = begin))
}
}
View(affectedPosHighMaf)
for (i in 1:(nrow(lowMaf))){
if (is.na(lowMaf$CDS_COORDS[i]) || lowMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(lowMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
affectedPosLowMaf = rbind(rowsLowMaf, cbind(lowMaf[i,], AFFECTED_POS = begin))
}
}
View(affectedPosLowMaf)
for (i in 1:(nrow(highMaf))){
if (is.na(highMaf$CDS_COORDS[i]) || highMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(highMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
affectedPosHighMaf = rbind(affectedPosHighMaf, cbind(highMaf[i,], AFFECTED_POS = begin))
}
}
affectedPosHighMaf = c()
for (i in 1:(nrow(highMaf))){
if (is.na(highMaf$CDS_COORDS[i]) || highMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(highMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
affectedPosHighMaf = rbind(affectedPosHighMaf, cbind(highMaf[i,], AFFECTED_POS = begin))
}
}
affectedPosLowMaf = c()
for (i in 1:(nrow(lowMaf))){
if (is.na(lowMaf$CDS_COORDS[i]) || lowMaf$CDS_COORDS[i] == ""){
next
}
interval = strsplit(lowMaf$CDS_COORDS[i], "-")
begin = as.numeric(interval[[1]][[1]])
end = as.numeric(interval[[1]][[2]])
if(begin == end){
affectedPosLowMaf = rbind(affectedPosLowMaf, cbind(lowMaf[i,], AFFECTED_POS = begin))
}
}
View(affectedPosLowMaf[myvars])
length(unique(affectedPosHighMaf$VARIATION_NAME))
length(unique(affectedPosLowMaf$VARIATION_NAME))
myvars=c("TRANSCRIPT_ID", "VARIATION_NAME", "VARIATION_TYPE", "CDS_COORDS", "AFFECTED_POS")
View(affectedPosLowMaf[myvars])
View(affectedPosHighMaf[myvars])
length(unique(affectedPosHighMaf$VARIATION_NAME))
length(unique(affectedPosHighMaf$TRANSCRIPT_ID))
length(unique(affectedPosLowMaf$VARIATION_NAME))
length(unique(affectedPosLowMaf$TRANSCRIPT_ID))
length(unique(affectedPosLowMaf$VARIATION_NAME))
length(unique(affectedPosLowMaf$TRANSCRIPT_ID))
table(affectedPosHighMaf$AFFECTED_POS)
table(affectedPosLowMaf$AFFECTED_POS)
a = table(affectedPosLowMaf$AFFECTED_POS)
a
a[1,]
a[1]
a[2]
a[3]
table(affectedPosHighMaf$AFFECTED_POS)
table(affectedPosLowMaf$AFFECTED_POS)
View(table(affectedPosHighMaf$AFFECTED_POS))
as.table(tableAffectedPosHM, tableAffectedPosLM)
tableAffectedPosHM= table(affectedPosHighMaf$AFFECTED_POS)
tableAffectedPosLM = table(affectedPosLowMaf$AFFECTED_POS)
as.table(tableAffectedPosHM, tableAffectedPosLM)
as.table(c(tableAffectedPosHM[1], tableAffectedPosHM[2], tableAffectedPosHM[3]), c(tableAffectedPosLM[1], tableAffectedPosLM[2], tableAffectedPosLM[3]))
as.table(rbind(c(tableAffectedPosHM[1], tableAffectedPosHM[2], tableAffectedPosHM[3]), c(tableAffectedPosLM[1], tableAffectedPosLM[2], tableAffectedPosLM[3])))
m = as.table(rbind(c(tableAffectedPosHM[1], tableAffectedPosHM[2], tableAffectedPosHM[3]), c(tableAffectedPosLM[1], tableAffectedPosLM[2], tableAffectedPosLM[3])))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST", "asd"))
m
m = as.table(rbind(c(tableAffectedPosHM[1], tableAffectedPosHM[2], tableAffectedPosHM[3]), c(tableAffectedPosLM[1], tableAffectedPosLM[2], tableAffectedPosLM[3])))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("A", "T", "G"))
m
m = as.table(rbind(c(tableAffectedPosHM[1], tableAffectedPosHM[2], tableAffectedPosHM[3]), c(tableAffectedPosLM[1], tableAffectedPosLM[2], tableAffectedPosLM[3])))
dimnames(m)=list(GROUP = c("MAF BAJA", "MAF ALTA"),
AFFECTED_CODON = c("A", "T", "G"))
m
prop.test(m)
t(m)
prop.test(t(m))
chisq.test(m)
chisq.test(t(m))
m
plot(highMaf$METS_IN_5_UTR, type ='l')
plot(density(highMaf$METS_IN_5_UTR), type ='l')
View(highMaf)
boxplot(highMaf$METS_IN_5_UTR)
boxplot(lowMaf$METS_IN_5_UTR)
summar(lowMaf$METS_IN_5_UTR)
summary(highMaf$METS_IN_5_UTR)
summary(lowMaf$METS_IN_5_UTR)
View(highMaf)
View(lowMaf)
op <- par(mfrow = c(1, 2))
boxplot(highMaf$METS_IN_5_UTR)
boxplot(lowMaf$METS_IN_5_UTR)
boxplot(lowMaf$METS_IN_5_UTR, highMaf$METS_IN_5_UTR)
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR", names = c("MAF alta", "MAF baja"))
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR", names = c("MAF alta", "MAF baja"))
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR", names = c("MAF alta", "MAF baja"), ylim=20)
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR", names = c("MAF alta", "MAF baja"), ylim=c(0, 20))
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR segun MAF", names = c("MAF alta", "MAF baja"), ylab = "Numero de metioninas en 5' utr", ylim=c(0, 20))
barplot(highMaf$METS_IN_5_UTR)
barplot(lowMaf$METS_IN_5_UTR)
plot(lowMaf$METS_IN_5_UTR)
plot(density(lowMaf$METS_IN_5_UTR))
plot(density(lowMaf$METS_IN_5_UTR, na.rm = T))
plot(density(highMaf$METS_IN_5_UTR, na.rm = T))
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR segun MAF", names = c("MAF alta", "MAF baja"), ylab = "Numero de metioninas en 5' UTR", ylim=c(0, 20))
plot(density(lowMaf$METS_IN_5_UTR, na.rm = T), main = "Densidad numero de metioninas en 5' UTR en MAF baja.")
plot(density(lowMaf$METS_IN_5_UTR, na.rm = T), main = "Densidad numero de metioninas en 5' UTR en MAF baja.", xlab = "Numero de metioninas en 5'UTR")
op <- par(mfrow = c(1, 2))
plot(density(highMaf$METS_IN_5_UTR, na.rm = T), main = "Densidad numero de metioninas en 5' UTR en MAF alta.", xlab = "Numero de metioninas en 5'UTR")
plot(density(lowMaf$METS_IN_5_UTR, na.rm = T), main = "Densidad numero de metioninas en 5' UTR en MAF baja.", xlab = "Numero de metioninas en 5'UTR")
par(op)
boxplot(highMaf$METS_IN_5_UTR, lowMaf$METS_IN_5_UTR, main = "Numero de metioninas en 5' UTR segun MAF", names = c("MAF alta", "MAF baja"), ylab = "Numero de metioninas en 5' UTR", ylim=c(0, 20))
library(gdata)
library(hash)
abs_file_dir = paste(exomes_dir, "PRL.GATK.snp.annovar.hg19_multianno.xls", sep="")
abs_file_dir
nuevo = read.xls(abs_file_dir)
nuevo = read.xls("/home/fabad/hemodonacion/data/exomes/PRL.GATK.snp.annovar.hg19_multianno.xls")
