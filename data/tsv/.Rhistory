library(rminer)
install.packages("rminer")
install.packages("nloptr")
library("foreign")
citation("foreign")
if(1==1 && 2==2){a=1}
if(1==1 && 2==3){a=2}
if(1==1 || 2==3){a=2}
setwd("~/hemodonacion/data/tsv")
csv = read.csv("9_12_2017.csv", sep="\t",stringsAsFactors=FALSE)
csv = read.csv("9-12-2017.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
View(table(csv$GENE_NAME))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_ID))
View(table(csv$GENE_NAME=="PAX5",))
View(csv[csv$GENE_NAME=="PAX5",])
View(table(csv$GENE_NAME))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$VARIATION_NAME))
View(csv[csv$GENE_NAME=="DTNA",])
View(csv)
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
length(unique(highMaf$VARIATION_NAME))
length(unique(lowMaf$VARIATION_NAME))
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$TRANSCRIPT_ID))
setwd("~/hemodonacion/data/tsv")
csv = read.csv("9-12-2017.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
View(table(csv$GENE_NAME))
nrow(csv)/length(unique(csv$GENE_NAME))
length(unique(csv$TRANSCRIPT_ID))
length(unique(csv$VARIATION_NAME))
length(unique(csv$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="TP53",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="CACNA1C",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="CDKN2A",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="DTNA",]))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
View(table(csv$VARIATION_TYPE))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
length(unique(highMaf$VARIATION_NAME))
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$VARIATION_NAME))
length(unique(lowMaf$TRANSCRIPT_ID))
unique(lowMaf$TRANSCRIPT_ID)
length(unique(lowMaf$TRANSCRIPT_ID))
csv = read.csv("26_04_2017.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
nrow(csv)/length(unique(csv$GENE_NAME))
length(unique(csv$TRANSCRIPT_ID))
length(unique(csv$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="TP53",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$VARIATION_NAME))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
length(unique(highMaf$VARIATION_NAME))
length(unique(lowMaf$VARIATION_NAME))
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$TRANSCRIPT_ID))
csv = read.csv("9-12-2017.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
nrow(csv)/length(unique(csv$GENE_NAME))
length(unique(csv$TRANSCRIPT_ID))
length(unique(csv$VARIATION_NAME))
length(unique(csv$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="PAX5",]$VARIATION_NAME))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$TRANSCRIPT_ID))
length(unique(csv[csv$GENE_NAME=="DTNA",]$VARIATION_NAME))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
length(unique(highMaf$VARIATION_NAME))
length(unique(lowMaf$VARIATION_NAME))
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$TRANSCRIPT_ID))
View(table(csv$GENE_NAME))
View(lowMaf)
length(unique(csv[csv$GENE_NAME=="PAX5",]$TRANSCRIPT_VARIATION_ALLELE_DBID))
length(unique(highMaf$VARIATION_NAME))
length(unique(highMaf$TRANSCRIPT_ID))
length(unique(lowMaf$VARIATION_NAME))
length(unique(lowMaf$TRANSCRIPT_ID))
length(unique(csv$GENE_NAME))
length(unique(csv$TRANSCRIPT_ID))
length(unique(csv$VARIATION_NAME))
setwd("~/hemodonacion/data/tsv")
csv = read.csv("26_04_2017.csv", sep="\t",stringsAsFactors=FALSE)
csv = read.csv("9-12-2017.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH_1"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_1))
csv[,"MUTATED_SEQUENCE_LENGTH_2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_2))
csv[,"MUTATED_SEQUENCE_LENGTH_3"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH_3))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_1"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_1))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_2"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_2))
csv[,"SIGNAL_PEPTIDE_CONSERVATION_3"]=as.numeric(gsub("%","",csv$SIGNAL_PEPTIDE_CONSERVATION_3))
csv$READING_FRAME_STATUS_1 = factor(csv$READING_FRAME_STATUS_1)
csv$READING_FRAME_STATUS_2 = factor(csv$READING_FRAME_STATUS_2)
csv$READING_FRAME_STATUS_3 = factor(csv$READING_FRAME_STATUS_3)
csv$STOP_CODON_POSITION_1 = factor(csv$STOP_CODON_POSITION_1)
csv$STOP_CODON_POSITION_2 = factor(csv$STOP_CODON_POSITION_2)
csv$STOP_CODON_POSITION_3 = factor(csv$STOP_CODON_POSITION_3)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS_1 == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS_1 == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$READING_FRAME_STATUS_3 == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$READING_FRAME_STATUS_3 == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m) # Muy significativo. El uso de la metionina en una secuencia de kozak fuerte favorece el mantenimiento del marco de lectura.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
length(unique(csvWithMaf$VARIATION_NAME))
length(unique(csvNoMaf$VARIATION_NAME))
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
length(unique(highMaf$VARIATION_NAME))
length(unique(lowMaf$VARIATION_NAME))
hist(highMaf$MET_POSITION_1, xlim = c(0,1000))
hist(lowMaf$MET_POSITION_1, xlim = c(0,1000))
numberOfMet5UTRLowMAF=sapply(strsplit(lowMaf$METS_IN_5_UTR, " "), length)
plot(density(numberOfMet5UTRLowMAF), col=gray(0.4), main="A", xlab = "Number of \"AUG\" codons in 5' UTR")
numberOfMet5UTRHighMAF=sapply(strsplit(highMaf$METS_IN_5_UTR, " "), length)
lines(density(numberOfMet5UTRHighMAF), col =gray(0), lty=5)
legend(34, 0.68, c("Low MAF","High MAF"), lty=c(1,5), col = c(gray(0.4),gray(0)))
numberOfMet5UTRLowMAF=sapply(strsplit(lowMaf$METS_IN_5_UTR, " "), length)
plot(density(numberOfMet5UTRLowMAF), col=gray(0.4), xlab = "Number of \"AUG\" codons in 5' UTR")
numberOfMet5UTRHighMAF=sapply(strsplit(highMaf$METS_IN_5_UTR, " "), length)
lines(density(numberOfMet5UTRHighMAF), col =gray(0), lty=5)
legend(34, 0.68, c("Low MAF","High MAF"), lty=c(1,5), col = c(gray(0.4),gray(0)))
numberOfMet5UTRLowMAF=sapply(strsplit(lowMaf$METS_IN_5_UTR, " "), length)
plot(density(numberOfMet5UTRLowMAF), col=gray(0.4), main="", xlab = "Number of \"AUG\" codons in 5' UTR")
numberOfMet5UTRHighMAF=sapply(strsplit(highMaf$METS_IN_5_UTR, " "), length)
lines(density(numberOfMet5UTRHighMAF), col =gray(0), lty=5)
legend(34, 0.68, c("Low MAF","High MAF"), lty=c(1,5), col = c(gray(0.4),gray(0)))
