install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
setwd("~/hemodonacion/data/tsv")
csv = read.csv("final_out_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
strong=csv[csv$KOZAK_IDENTITY=="GXXATGG"]
strong=csv[csv$KOZAK_IDENTITY=="GXXATGG",]
strong=csv[csv$KOZAK_IDENTITY=="GXXATGG" || csv$KOZAK_IDENTITY=="AXXATGG",]
View(strong)
strong=csv[!is.na(csv$KOZAK_IDENTITY) & (csv$KOZAK_IDENTITY=="GXXATGG" || csv$KOZAK_IDENTITY=="AXXATGG"),]
strong=csv[!is.na(csv$KOZAK_IDENTITY),]
strong=csv[csv$KOZAK_IDENTITY != "" & (csv$KOZAK_IDENTITY=="GXXATGG" || csv$KOZAK_IDENTITY=="AXXATGG"),]
strong=csv[csv$KOZAK_IDENTITY != "" & (csv$KOZAK_IDENTITY=="GXXATGG" | csv$KOZAK_IDENTITY=="AXXATGG"),]
View(csv)
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido seÃ±al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met >= (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak >= (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
add_mutation_type = function(csv){
for (i in 1:nrow(csv)){
codon_change = trimws(csv[i, "CODON_CHANGE"])
if (!is.na(codon_change) && "" != codon_change){
splitted = strsplit(codon_change, "/")
original = splitted[[1]][1]
mutated = splitted[[1]][2]
if(nchar(original) > nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Deletion"
} else if(nchar(original) < nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Insertion"
} else {
csv[i, "VARIATION_TYPE"] = "Nucleotid change"
}
}
}
return(csv)
}
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
strong=csv[csv$KOZAK_IDENTITY=="GXXATGG" || csv$KOZAK_IDENTITY=="AXXATGG",]
View(csv)
strong = csv[csv$KOZAK_IDENTITY!=""]
strong = csv[csv$KOZAK_IDENTITY!="",]
strong=strong[strong$KOZAK_IDENTITY=="GXXATGG" || strong$KOZAK_IDENTITY=="AXXATGG",]
strong = csv[csv$KOZAK_IDENTITY!="",]
strong=strong[strong$KOZAK_IDENTITY=="GXXATGG" | strong$KOZAK_IDENTITY=="AXXATGG",]
weak = csv[csv$KOZAK_IDENTITY!="",]
weak = weak[weak$KOZAK_IDENTITY != "GXXATGG" & weak$KOZAK_IDENTITY != "aXXATGG"]
weak = weak[weak$KOZAK_IDENTITY != "GXXATGG" & weak$KOZAK_IDENTITY != "aXXATGG",]
nrow(weak) + nrow(strong)
nrow(csv[csv$KOZAK_IDENTITY!="",])
strong = csv[csv$KOZAK_IDENTITY!="",]
strong=strong[strong$KOZAK_IDENTITY=="GXXATGG" | strong$KOZAK_IDENTITY=="AXXATGG",]
weak = csv[csv$KOZAK_IDENTITY!="",]
weak = weak[weak$KOZAK_IDENTITY != "GXXATGG" & weak$KOZAK_IDENTITY != "AXXATGG",]
nrow(weak) + nrow(strong)
nrow(csv[csv$KOZAK_IDENTITY!="",])
nrow(weak) + nrow(strong) == nrow(csv[csv$KOZAK_IDENTITY!="",])
View(strong[strong$KOZAK_READING_FRAME_STATUS == "Conserved"])
View(strong[strong$KOZAK_READING_FRAME_STATUS == "Conserved",])
strongConserved=nrow(strong[strong$KOZAK_READING_FRAME_STATUS == "Conserved",])
strongLost=nrow(strong[strong$KOZAK_READING_FRAME_STATUS == "Lost",])
weakConserved=nrow(weak[weak$KOZAK_READING_FRAME_STATUS == "Conserved",])
weakLost=nrow(weak[weak$KOZAK_READING_FRAME_STATUS == "Lost",])
View(weak)
