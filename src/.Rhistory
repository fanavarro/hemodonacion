install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
setwd("/home/fabad/hemodonacion/src")
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
View(csv)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido seÃ±al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
csv = add_signal_lost_sup_info(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
add_mutated_seq_length_kozak = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = met_end - met_start + 1
met_percentage = csv[i, "MUTATED_SEQUENCE_LENGTH"]
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length = kozak_end - kozak_start + 1
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_mutated_seq_length_kozak(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
csv = add_mutated_seq_length_kozak(csv)
warnings()
View(csv)
myvars <- c("FIRST_MET_POSITION","STOP_CODON_POSITION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH")
View(csv[myvars])
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.numeric(met_end) - as.numeric(met_start) + 1
met_percentage = as.numeric(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.numeric(kozak_end) - as.numeric(kozak_start) + 1
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
View(csv[myvars])
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
View(csv[myvars])
debugSource('~/hemodonacion/src/statistics.R')
debugSource('~/hemodonacion/src/statistics.R')
add_kozak_mutated_seq_length = function(csv){
#for (i in 1:nrow(csv)){
for (i in 1:3){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage)
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
add_kozak_mutated_seq_length = function(csv){
#for (i in 1:nrow(csv)){
for (i in 1:3){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage)
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
add_kozak_mutated_seq_length = function(csv){
#for (i in 1:nrow(csv)){
for (i in 1:3){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
cat("\n")
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_kozak_mutated_seq_length(csv)
csv = add_kozak_mutated_seq_length(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_kozak_mutated_seq_length(csv)
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
warning()
warnings()
csv = add_kozak_mutated_seq_length(csv)
warnings()
View(csv[myvars])
myvars <- c("FIRST_MET_POSITION","STOP_CODON_POSITION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH", "KOZAK_STOP")
View(csv[myvars])
View(csv)
myvars <- c("FIRST_MET_POSITION","STOP_CODON_POSITION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH", "KOZAK_STOP_CODON")
View(csv[myvars])
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(kozak_mutated_seq_length,"%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
View(csv[myvars])
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(toString(kozak_mutated_seq_length),"%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = add_kozak_mutated_seq_length(csv)
View(csv[myvars])
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(toString(kozak_mutated_seq_length),"%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = add_kozak_mutated_seq_length(csv)
warnings()
View(csv[myvars])
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = add_kozak_mutated_seq_length(csv)
View(csv[myvars])
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
cat("\n")
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
add_kozak_mutated_seq_length = function(csv){
#for (i in 1:nrow(csv)){
for (i in 1:3){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
cat("\n")
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
setwd("/home/fabad/hemodonacion/src")
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = add_kozak_mutated_seq_length(csv)
add_kozak_mutated_seq_length = function(csv){
#for (i in 1:nrow(csv)){
for (i in 1:3){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
cat("\n")
cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = kozak_mutated_seq_length
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
csv = add_kozak_mutated_seq_length(csv)
add_kozak_mutated_seq_length = function(csv){
for (i in 1:nrow(csv)){
#for (i in 1:3){
met_start = csv[i, "FIRST_MET_POSITION"]
met_end = csv[i, "STOP_CODON_POSITION"]
met_seq_length = as.double(met_end) - as.double(met_start) + 1
met_percentage = as.double(csv[i, "MUTATED_SEQUENCE_LENGTH"])
kozak_start = csv[i, "KOZAK_START"]
kozak_end = csv[i, "KOZAK_END"]
kozak_seq_length =as.double(kozak_end) - as.double(kozak_start) + 1
#cat("\n")
#cat("met start=",met_start,"\n", "met end=",met_end, "\n", "met length=",met_seq_length,"\n")
#cat("kozak start=",kozak_start,"\n", "kozak end=",kozak_end, "\n", "kozak length=",kozak_seq_length,"\n")
if(!is.na(kozak_seq_length) && !is.na(met_percentage) && !is.na(met_seq_length)){
kozak_mutated_seq_length = kozak_seq_length * met_percentage / met_seq_length
#cat("kozak_mutated_seq_length=", kozak_mutated_seq_length,"\t", "met_percentage=",met_percentage,"\n")
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = paste(toString(kozak_mutated_seq_length), "%", sep="")
}else{
csv[i, "KOZAK_MUTATED_SEQUENCE_LENGTH"] = NA
}
}
return(csv)
}
setwd("/home/fabad/hemodonacion/src")
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = add_kozak_mutated_seq_length(csv)
myvars <- c("FIRST_MET_POSITION","STOP_CODON_POSITION","MUTATED_SEQUENCE_LENGTH", "KOZAK_START", "KOZAK_END", "KOZAK_MUTATED_SEQUENCE_LENGTH", "KOZAK_STOP_CODON")
View(csv[myvars])
