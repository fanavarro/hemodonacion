add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido señal.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
setwd("/home/fabad/hemodonacion/src")
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(highMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(highMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, ylim=c(0,3000))
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START, ylim=c(0,1500))
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION,
main="Comparación de la posición de la primera metionina alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START,
main="Comparación de la posición de la primera Kozak alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
op <- par(mfrow = c(2, 2))
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION,
main="Comparación de la posición de la primera metionina alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START,
main="Comparación de la posición de la primera Kozak alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
par(op)
op <- par(mfrow = c(1, 2))
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION,
main="Comparación de la posición de la primera metionina alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START,
main="Comparación de la posición de la primera Kozak alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION,
main="Comparación de la posición de la primera metionina alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START, ylim=c(0,4000),
main="Comparación de la posición de la primera Kozak alternativa\nentre los grupos de muestras con MAF alta y MAF baja")
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION) # Varianzas distintas
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION) # Varianzas distintas
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START) # Varianzas distintas
#Test de normalidad
shapiro.test(highMaf$FIRST_MET_POSITION) # No normal
shapiro.test(lowMaf$FIRST_MET_POSITION) # No normal
shapiro.test(highMaf$KOZAK_START) # No normal
shapiro.test(lowMaf$KOZAK_START) # No normal
# Test de wilcoxon para comparar medias
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$KOZAK_START, lowMaf$KOZAK_START, paired = F, conf.level = 0.95) # Distribuciones iguales
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$KOZAK_START, lowMaf$KOZAK_START, paired = F, conf.level = 0.95) # Distribuciones iguales
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$KOZAK_START, lowMaf$KOZAK_START, paired = F, conf.level = 0.95) # Distribuciones iguales
