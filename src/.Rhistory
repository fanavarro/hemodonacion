install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
setwd("/home/fabad/hemodonacion/src")
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido seÃ±al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
add_mutation_type = function(csv){
for (i in 1:nrow(csv)){
codon_change = trimws(csv[i, "CODON_CHANGE"])
if (!is.na(codon_change) && "" != codon_change){
splitted = strsplit(codon_change, "/")
original = splitted[[1]][1]
mutated = splitted[[1]][2]
if(nchar(original) > nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Deletion"
} else if(nchar(original) < nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Insertion"
} else {
csv[i, "VARIATION_TYPE"] = "Nucleotid change"
}
}
}
return(csv)
}
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_mutation_type(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
rf_conserved_met_low_maf=nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
rf_lost_met_low_maf=nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
rf_conserved_met_high_maf=nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH > 1 & highMaf$READING_FRAME_STATUS == 'Conserved',])
rf_lost_met_high_maf=nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$READING_FRAME_STATUS == 'Lost',])
m = as.table(rbind(c(rf_conserved_met_low_maf,rf_lost_met_low_maf), c(rf_conserved_met_high_maf,rf_lost_met_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m)
summary(lowMaf$FIRST_MET_POSITION)
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(lowMaf$READING_FRAME_STATUS)
# Marco de lectura conservado si, ademas de tener "Conserved" tiene una longitud mayor al 1% de la seq original
rf_conserved_met_low_maf = nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
rf_lost_met_low_maf = nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(highMaf$FIRST_MET_POSITION)
summary(highMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(highMaf$READING_FRAME_STATUS)
rf_conserved_met_high_maf = nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH > 1 & highMaf$READING_FRAME_STATUS == 'Conserved',])
rf_lost_met_high_maf = nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$READING_FRAME_STATUS == 'Lost',])
summary(highMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(lowMaf$KOZAK_START)
summary(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(lowMaf$KOZAK_READING_FRAME_STATUS)
rf_conserved_kozak_low_maf = nrow(lowMaf[lowMaf$KOZAK_MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',])
rf_lost_kozak_low_maf = nrow(lowMaf[lowMaf$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1 & !is.na(lowMaf$KOZAK_MUTATED_SEQUENCE_LENGTH) & lowMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$KOZAK_READING_FRAME_STATUS == 'Lost',])
summary(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(highMaf$KOZAK_START)
summary(highMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(highMaf$KOZAK_READING_FRAME_STATUS)
rf_conserved_kozak_high_maf = nrow(highMaf[highMaf$KOZAK_MUTATED_SEQUENCE_LENGTH > 1 & highMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',])
rf_lost_kozak_high_maf = nrow(highMaf[highMaf$KOZAK_MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$KOZAK_READING_FRAME_STATUS == 'Lost',])
m = as.table(rbind(c(rf_conserved_met_low_maf,rf_lost_met_low_maf), c(rf_conserved_met_high_maf,rf_lost_met_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
m = as.table(rbind(c(rf_conserved_kozak_low_maf,rf_lost_kozak_low_maf), c(rf_conserved_kozak_high_kozak,rf_lost_kozak_high_maf)))
m = as.table(rbind(c(rf_conserved_kozak_low_maf,rf_lost_kozak_low_maf), c(rf_conserved_kozak_high_maf,rf_lost_kozak_high_maf)))
dimnames(m)=list(GRUPO = c("MAF BAJA", "MAF ALTA"),
READING_FRAME_STATUS = c("CONSERVED", "LOST"))
m
chisq.test(m) # p-value menor que 0.05 indica que cada grupo de mutaciones presenta diferencias significativas
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
m = as.table(rbind(c()))
summary(highMaf$SIGNAL_FIRST_MET_AFFECTED)
table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)[1]
table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)[1]+3
high_maf_signal_values_met = table(highMaf$SIGNAL_FIRST_MET_AFFECTED)
low_maf_signal_values_met = table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
as.table(rbind(c(high_maf_signal_values_met), c(low_maf_signal_values_met)))
rownames(m) = c("MAF ALTA","MAF BAJA")
M
m
high_maf_signal_values_met = table(highMaf$SIGNAL_FIRST_MET_AFFECTED)
low_maf_signal_values_met = table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
m = as.table(rbind(c(high_maf_signal_values_met), c(low_maf_signal_values_met)))
rownames(m) = c("MAF BAJA","MAF ALTA")
m
high_maf_signal_values_met = table(highMaf$SIGNAL_FIRST_MET_AFFECTED)
low_maf_signal_values_met = table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
m = as.table(rbind(c(high_maf_signal_values_met), c(low_maf_signal_values_met)))
rownames(m) = c("MAF ALTA","MAF BAJA")
m
high_maf_signal_values_met = table(highMaf$SIGNAL_FIRST_MET_AFFECTED)
low_maf_signal_values_met = table(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
m = as.table(rbind(c(low_maf_signal_values_met), c(high_maf_signal_values_met)))
rownames(m) = c("MAF BAJA","MAF ALTA")
m
chisq.test(m) # p-value mayor que 0.05 indica que cada grupo de mutaciones no presenta diferencias significativas
high_maf_signal_values_kozak = table(highMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
low_maf_signal_values_kozak = table(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
m = as.table(rbind(c(low_maf_signal_values_kozak), c(high_maf_signal_values_kozak)))
rownames(m) = c("MAF BAJA","MAF ALTA")
m
chisq.test(m) # p-value menor que 0.05 indica que cada grupo de mutaciones presenta diferencias significativas
nrow(csv[csv$READING_FRAME_STATUS == "Conserved"])
nrow(csv[csv$READING_FRAME_STATUS == "Conserved",])
nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved",])
nrow(csv[csv$READING_FRAME_STATUS == "Conserved",])
nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved",])
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS == "Conserved",]); rf_met_conserved
rf_met_conserved = nrow(csv[csv$READING_FRAME_STATUS == "Conserved",]); rf_met_conserved
rf_met_lost = nrow(csv[csv$READING_FRAME_STATUS == "Lost",]); rf_met_lost
rf_kozak_conserved = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Conserved",]); rf_kozak_conserved
rf_kozak_lost = nrow(csv[csv$KOZAK_READING_FRAME_STATUS == "Lost",]); rf_kozak_lost
m = as.table(rbind(c(rf_met_conserved, rf_met_lost), c(rf_kozak_conserved, rf_kozak_lost)))
dimnames(m) = list(group=c("First Met", "Kozak Met")
reading_frame=c("Conserved", "Lost"))
m
dimnames(m) = list(group=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
dimnames(m) = list(group=c("First Met", "Kozak Met"),
alt_met=c("Conserved", "Lost"))
m
dimnames(m) = list(alt_met=c("First Met", "Kozak Met"),
reading_frame=c("Conserved", "Lost"))
m
chisq.test(m)
