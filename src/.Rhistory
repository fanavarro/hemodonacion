install.packages("FactoMineR")
library(FactoMineR)
getwd()
install.packages("FactoMineR")
sessionInfo()
install.packages("faraway")
library(faraway)
install.packages("gplots")
leveneTest(regresion$residuals,fitted(regresion)) # TODO: No funciona...
library(faraway)
library(alr3)
library(car)
library(gvlma)
data(diabetes)
# Eliminamos los casos en los que glyhb es NA.
fdiabetes = diabetes[!(is.na(diabetes$glyhb)),]
attach(fdiabetes)
# Realizamos la regresion con ver como influyen las variables ratio, age, height, weight, bp.1s y bp.1d sobre glyhb.
regresion = lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d, data=fdiabetes)
summary(regresion) # Cuanto mayor p-valor, menos significativo es el factor.
plot(regresion)
shapiro.test(regresion$residuals)
ks.test(regresion$residuals, "pnorm")
# Los tests indican que no se puede aceptar la hipotesis de que los residuos siguan una normal.
# Comprobacion de homogeneidad de varianzas
leveneTest(regresion$residuals,fitted(regresion)) # TODO: No funciona...
length(regresion$residuals)
length(fdiabetes$gender)
cor(data.frame(fdiabetes["age"], fdiabetes["weight"], fdiabetes["ratio"], fdiabetes["bp.1s"], fdiabetes["bp.1d"],fdiabetes["height"]), use = "complete.obs")
plot(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d)
regresion2 = lm(glyhb ~ ratio + age + weight, data=fdiabetes)
summary(regresion2)
# Con esta regresion, las tres variables que tenemos son significativas segun sus p-values, por lo que trabajaremos con las variables ratio, age y weight.
# Finalmente, tenemos la siguiente ecuacion como modelo de regresion:
# glyhb = 1.06 + (0.33 * ratio) + (0.04 * age) + (0.006 * weigth)
# El parametro Adjusted R-squared ahora vale 0.2045, lo que indica una ligera mejora en el modelo, aunque sigue siendo malo.
plot(regresion2) # Pintamos las graficas correspondientes a la regresion.
plot(regresion2, which=4)
shapiro.test(regresion2$residuals)
ks.test(regresion2$residuals, "pnorm")
# Rechazamos la normalidad de los residuos de la regresion.
# Test de homogeneidad de varianzas.
leveneTest(regresion2$residuals, fitted(regresion2)) # TODO: no va...
# Linealidad del modelo.
pureErrorAnova(regresion2) # TODO: como se ve esto??
# Correlacion
vif(regresion2) # Factor incremento de la varianza. Para ver las variables predictoras que mas dependen de otras.
# El grado de colinealidad es bajo.
# Tambien se puede ver la baja correlacion de los factores de la siguiente forma:
cor(data.frame(fdiabetes["age"], fdiabetes["weight"], fdiabetes["ratio"]), use = "complete.obs")
vif(regresion2) # Factor incremento de la varianza. Para ver las variables predictoras que mas dependen de otras.
gvmodel = gvlma.lm(regresion)
summary(gvmodel)
fdiabetes[glyhb>7]
fdiabetes[glyhb]
fdiabetes[glyhb]>7
fdiabetes[glyhb>7,]
fdiabetes
fdiabetes[glyhb>7,]
View(fdiabetes)
fdiabetes
View(fdiabetes[glyhb>7,])
diabeticos = fdiabetes[glyhb>7,]
no_diabeticos = fdiabetes[glyhb <= 7,]
attach(no_diabeticos)
plot(no_diabeticos ~ ratio + age + height + weight + bp.1s + bp.1d)
plot(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d)
qqline(glyhb)
qqline(ratio)
qqline(glyhb~ratio)
regresion_no_diabeticos = lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d)
plot(regresion_no_diabeticos)
summary(regresion_no_diabeticos)
regresion_no_diabeticos = lm(glyhb ~ ratio + age + weight)
plot(regresion_no_diabeticos)
summary(regresion_no_diabeticos)
regresion_no_diabeticos = lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d)
summary(regresion_no_diabeticos)
regresion_no_diabeticos = lm(glyhb ~ ratio + age + weight)
# La significacion de las variables seleccionadas se mantiene.
summary(regresion_no_diabeticos)
# Se puede ver como se sigue la normalidad de mejor forma que en los casos donde metiamos a los diabeticos en la muestra.
# La grafica de residuals vs fitted es practicamente lineal y presenta homogeneidad de varianzas.
plot(regresion_no_diabeticos)
shapiro.test(regresion_no_diabeticos$residuals)
ks.test(regresion_no_diabeticos$residuals, "pnorm")
attach(diabeticos)
plot(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d)
regresion_diabeticos = lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d)
summary(regresion_diabeticos)
plot(regresion_diabeticos)
summary(regresion_no_diabeticos)
gvmodel = gvlma.lm(regresion_no_diabeticos)
summary(gvmodel)
regresion_no_diabeticos
data.frame(ratio=38, age=25, weight=50)
View(no_diabeticos)
predict(regresion_no_diabeticos, interval = "prediction", level = .95, data.frame(ratio=3.6, age=46, weight=121))
plot(regresion_no_diabeticos)
coeftest(lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d, data=no_diabeticos)) # Con todas las variables, bp.1d es la menos significativa, por lo que la eliminamos.
library(faraway)
library(alr3)
library(car)
library(gvlma)
library(lmtest)
library(leaps)
coeftest(lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d, data=no_diabeticos)) # Con todas las variables, bp.1d es la menos significativa, por lo que la eliminamos.
coeftest(lm(glyhb ~ ratio + age + weight + bp.1s + bp.1d, data=no_diabeticos)) # Con todas las variables, height es la menos significativa, por lo que la eliminamos.
coeftest(lm(glyhb ~ ratio + age + weight + bp.1s, data=no_diabeticos)) # bp.1d es la menos significativa, por lo que la eliminamos.
coeftest(lm(glyhb ~ ratio + age + weight, data=no_diabeticos)) # bp.1s es la menos significativa, por lo que la eliminamos.
regresion_no_diabeticos = lm(glyhb ~ ratio + age + weight)
no_diabeticos = fdiabetes[glyhb <= 7,]
library(faraway)
library(alr3)
library(car)
library(gvlma)
library(lmtest)
library(leaps)
data(diabetes)
# Eliminamos los casos en los que glyhb es NA.
fdiabetes = diabetes[!(is.na(diabetes$glyhb)),]
no_diabeticos = fdiabetes[glyhb <= 7,]
attach(fdiabetes)
no_diabeticos = fdiabetes[glyhb <= 7,]
attach(no_diabeticos)
# Se puede ver como la mayoria de variables siguen una recta en los siguientes graficos.
regresion_no_diabeticos = lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d, data = no_diabeticos)
coeftest(lm(glyhb ~ ratio + age + height + weight + bp.1s + bp.1d, data=no_diabeticos)) # Con todas las variables, height es la menos significativa, por lo que la eliminamos.
coeftest(lm(glyhb ~ ratio + age + weight + bp.1s + bp.1d, data=no_diabeticos)) # bp.1d es la menos significativa, por lo que la eliminamos.
coeftest(lm(glyhb ~ ratio + age + weight, data=no_diabeticos)) # Nos quedamos con ratio, age y weight, al igual que con la muestra que incluye a diabeticos.
# Realizamos una nueva regresion para quedarnos solo con estas variables.
regresion_no_diabeticos = lm(glyhb ~ ratio + age + weight)
# La significacion de las variables seleccionadas se mantiene.
summary(regresion_no_diabeticos)
plot(regresion_no_diabeticos)
shapiro.test(regresion_no_diabeticos$residuals)
ks.test(regresion_no_diabeticos$residuals, "pnorm")
# Los tests indican que sigue sin cumplirse la normalidad, pero nos acercamos mas que con la muestra completa.
# La libreria gvlma nos muestra un resumen de las condiciones que se cumplen en esta regresion:
gvmodel = gvlma.lm(regresion_no_diabeticos)
summary(gvmodel)
# Predicciones
predict(regresion_no_diabeticos, interval = "prediction", level = .95, data.frame(ratio=3.6, age=46, weight=121))
source("https://bioconductor.org/biocLite.R")
biocLite()
install.packages("fastcluster")
install.packages("pvclust")
install.packages("dbscan")
install.packages("cluster")
setwd("/home/fabad/hemodonacion/src")
common=read.table('hist_common.dat')
no_common=read.table('hist_no_common.dat')
plot(common, type='h')
plot(common, type='h', xlim=c(0,1000), xlab="Posicion de la primera metionina en la secuencia mutada", ylab="Numero de casos", main="MAF mayor al 1%")
plot(no_common, type='h', xlab="Posicion de la primera metionina en la secuencia mutada", ylab="Numero de casos", main="MAF menor al 1%")
setwd("/home/fabad/hemodonacion/src")
common=read.table('hist_common.dat')
no_common=read.table('hist_no_common.dat')
plot(common, type='h', xlim=c(0,1000), xlab="Posicion de la primera metionina en la secuencia mutada", ylab="Numero de casos", main="MAF mayor al 1%")
plot(no_common, type='h', xlab="Posicion de la primera metionina en la secuencia mutada", ylab="Numero de casos", main="MAF menor al 1%")
setwd("/home/fabad/hemodonacion/src")
csv = read.csv("by_pos_manual_filter.csv", sep="\t")
View(csv)
csv[csv$MINOR_ALLELE_FREQUENCY>0.01]
csv[csv$MINOR_ALLELE_FREQUENCY > 0.01,]
View(csv[csv$MINOR_ALLELE_FREQUENCY > 0.01,])
View(csv[ ,csv$MINOR_ALLELE_FREQUENCY > 0.01])
View(csv[csv$MINOR_ALLELE_FREQUENCY > 0.01] ,)
View(csv[,csv$MINOR_ALLELE_FREQUENCY > 0.01] )
View(csv[csv$MINOR_ALLELE_FREQUENCY > 0.01,] )
csv = read.csv("by_pos_manual_filter.csv", sep="\t",stringsAsFactors=FALSE)
View(csv[csv$MINOR_ALLELE_FREQUENCY > 0.01,] )
View(csv[csv$MINOR_ALLELE_FREQUENCY >= 0.01,] )
highMaf = csv[csv$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csv[csv$MINOR_ALLELE_FREQUENCY < 0.01,]
noMaf = csv[csv$MINOR_ALLELE_FREQUENCY == "-",]
View(noMaf)
View(lowMaf)
View(highMaf)
dim(noMaf)
dim(noMaf)[1,]
dim(noMaf)[1]
dim(noMaf)[1]
dim(highMaf)[1]
dim(lowMaf)[1]
dim(csv)[1]
dim(noMaf)[1] + dim(highMaf)[1] + dim(lowMaf)[1]
dim(csv)[1]
csvWithMaf = csv[csv$MINOR_ALLELE_FREQUENCY != "-",]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
noMaf = csv[csv$MINOR_ALLELE_FREQUENCY == "-",]
dim(noMaf)[1] + dim(highMaf)[1] + dim(lowMaf)[1]
dim(csv)[1]
as.numeric("23")
as.numeric("23*")
sub("d+\*", "d+", c("22", "12", "32*", "3"), perl=TRUE)
sub("d+", "d+", c("22", "12", "32*", "3"), perl=TRUE)
sub("d+*", "d+", c("22", "12", "32*", "3"), perl=TRUE)
sub("d+\*", "d+", c("22", "12", "32*", "3"), perl=TRUE)
sub("\*", "", c("22", "12", "32*", "3"), perl=TRUE)
sub("d+\\*", "d+", c("22", "12", "32*", "3"), perl=TRUE)
gsub("\\*$", "", c("22", "12", "32*", "3"), perl=TRUE)
csvWithMaf$MINOR_ALLELE_FREQUENCY = gsub("\\*$", "", csvWithMaf$MINOR_ALLELE_FREQUENCY, perl=TRUE)
View(csvWithMaf)
View(csvWithMaf[csvWithMaf$SOURCE != 'dbSNP', ])
View(csv)
csv = read.csv("by_pos_manual_filter.csv", sep="\t",stringsAsFactors=FALSE)
csvWithMaf = csv[csv$MINOR_ALLELE_FREQUENCY != "-",]
View(highMaf)
View(csvWithMaf)
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
noMaf = csv[csv$MINOR_ALLELE_FREQUENCY == "-",]
View(csvWithMaf[csvWithMaf$SOURCE != 'dbSNP', ])
View(csvWithMaf[csvWithMaf$SOURCE == 'dbSNP', ])
mean(highMaf$FIRST_MET_POSITION)
mean(lowMaf$FIRST_MET_POSITION)
summary(lowMaf)
highMaf$FIRST_MET_POSITION = as.numeric(highMaf$FIRST_MET_POSITION)
mean(highMaf$FIRST_MET_POSITION)
highMaf$FIRST_MET_POSITION
highMaf$FIRST_MET_POSITION[1]
highMaf$FIRST_MET_POSITION[1] + highMaf$FIRST_MET_POSITION[2]
mean(highMaf$FIRST_MET_POSITION, na.rm=TRUE)
mean(lowMaf$FIRST_MET_POSITION)
mean(lowMaf$FIRST_MET_POSITION, na.rm=TRUE)
lowMaf$FIRST_MET_POSITION
lowMaf$FIRST_MET_POSITION = as.numeric(lowMaf$FIRST_MET_POSITION)
mean(lowMaf$FIRST_MET_POSITION, na.rm=TRUE)
summary(lowMaf)
summary(highMaf)
hist(highMaf$FIRST_MET_POSITION)
hist(lowMaf$FIRST_MET_POSITION)
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$FIRST_MET_POSITION)
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
shapiro.test(highMaf$FIRST_MET_POSITION)
shapiro.test(lowMaf$FIRST_MET_POSITION)
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95)
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
mean(highMaf$FIRST_MET_POSITION, na.rm=TRUE)
mean(lowMaf$FIRST_MET_POSITION, na.rm=TRUE)
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
shapiro.test(highMaf$FIRST_MET_POSITION)
shapiro.test(lowMaf$FIRST_MET_POSITION)
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95)
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
View(csv)
View(csv[csv$CDS_ERRORS == '',])
csv = csv[csv$CDS_ERRORS == '',]
View(csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay',])
View(csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',])
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[csv$MINOR_ALLELE_FREQUENCY != "-",]
csvWithMaf = csv[csv$MINOR_ALLELE_FREQUENCY != NA,]
csvWithMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
View(csvWithMaf)
noMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
3379+32599
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
225+3154
summary(highMaf)
hist(highMaf$FIRST_MET_POSITION)
hist(lowMaf$FIRST_MET_POSITION)
var.test(highMaf$KOZAK_START, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$KOZAK_START, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START)
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START)
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x, y)                  # Do x and y have the same variance?
x <- rnorm(50, mean = 0, sd = 22)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x, y)                  # Do x and y have the same variance?
x <- rnorm(50, mean = 0, sd = 1)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x, y)                  # Do x and y have the same variance?
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START)
shapiro.test(highMaf$FIRST_MET_POSITION)
shapiro.test(lowMaf$FIRST_MET_POSITION)
shapiro.test(highMaf$KOZAK_START) # No normal
shapiro.test(lowMaf$KOZAK_START) # No normal
wilcox.test(highMaf$KOZAK_START, lowMaf$KOZAK_START, paired = F, conf.level = 0.95)
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START)
summary(highMaf$KOZAK_START)
summary(lowMaf$KOZAK_START)
View(highMaf)
setwd("/home/fabad/hemodonacion/src")
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
csv = csv[csv$CDS_ERRORS == '',]
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
csv = csv[csv$CDS_ERRORS == '',]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY)]
csvWithMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
summary(lowMaf)
highMaf$FIRST_MET_POSITION[1] + highMaf$FIRST_MET_POSITION[2]
hist(highMaf$FIRST_MET_POSITION)
hist(lowMaf$FIRST_MET_POSITION)
hist(highMaf$KOZAK_START)
hist(lowMaf$KOZAK_START)
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START)
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x, y)                  # Do x and y have the same variance?
x <- rnorm(50, mean = 0, sd = 1)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x, y)                  # Do x and y have the same variance?
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION) # Varianzas distintas
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START) # Varianzas iguales
shapiro.test(highMaf$FIRST_MET_POSITION)
shapiro.test(lowMaf$FIRST_MET_POSITION)
shapiro.test(highMaf$KOZAK_START) # No normal
shapiro.test(lowMaf$KOZAK_START) # No normal
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95)
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95)
wilcox.test(highMaf$KOZAK_START, lowMaf$KOZAK_START, paired = F, conf.level = 0.95)
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START)
setwd("/home/fabad/hemodonacion/src")
# Leer el csv sin filtros
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
csv = csv[csv$CDS_ERRORS == '',]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
summary(lowMaf)
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=TRUE)
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
summary(lowMaf)
summary(highMaf)
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
summary(lowMaf)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv = csv[csv$CDS_ERRORS == '',]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
summary(lowMaf)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv = csv[csv$CDS_ERRORS == '',]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
summary(lowMaf)
summary(highMaf)
hist(highMaf$FIRST_MET_POSITION)
hist(lowMaf$FIRST_MET_POSITION)
hist(highMaf$KOZAK_START)
hist(lowMaf$KOZAK_START)
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START)
min(csv$KOZAK_START)
min(csv$KOZAK_START, na.rm=T)
csv[csv$KOZAK_START == min(csv$KOZAK_START, na.rm=T), ]
csv[csv$KOZAK_START == min(csv$KOZAK_START, na.rm=T)]
View(csv[csv$KOZAK_START == min(csv$KOZAK_START, na.rm=T),])
min(csv$KOZAK_START, na.rm=T)
View(csv[csv$KOZAK_START == -12255,])
csv[csv$KOZAK_START == -12255,]
csv[csv$KOZAK_START == '-12255',]
csv[csv$KOZAK_START == -12255 , ]
csv[csv$KOZAK_START <= -12255 , ]
csv$KOZAK_START
csv[is.na(csv$KOZAK_START), ]
View(csv[is.na(csv$KOZAK_START), ])
View(csv[csv$KOZAK_START==0, ])
View(csv[csv$KOZAK_START=0, ])
View(csv[,csv$KOZAK_START==0 ])
View(csv[csv$KOZAK_START==0])
View(csv[csv$KOZAK_START==0,])
View(csv[csv$KOZAK_START==22,])
View(csv)
setwd("/home/fabad/hemodonacion/src")
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
View(csv)
csv = csv[csv$CDS_ERRORS == '',]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
summary(csv$GENE_NAME)
csv$GENE_NAME = factor(csv$GENE_NAME)
summary(csv$GENE_NAME)
unique(csv$GENE_NAME)
dim(unique(csv$GENE_NAME))
length(unique(csv$GENE_NAME))
length(unique(csv$GENE_NAME))
csv = read.csv("kozak.csv", sep="\t",stringsAsFactors=FALSE)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
length(unique(csv$GENE_NAME))
csv = csv[csv$CDS_ERRORS == '',]
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
length(unique(csv$GENE_NAME))
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
summary(lowMaf)
summary(highMaf)
View(highMaf)
hist(highMaf$FIRST_MET_POSITION)
hist(lowMaf$FIRST_MET_POSITION)
hist(highMaf$KOZAK_START)
hist(lowMaf$KOZAK_START)
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION) # Varianzas distintas
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START) # Varianzas iguales
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION) # Varianzas distintas
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START) # Varianzas iguales
shapiro.test(highMaf$FIRST_MET_POSITION) # No normal
shapiro.test(lowMaf$FIRST_MET_POSITION) # No normal
shapiro.test(highMaf$KOZAK_START) # No normal
shapiro.test(lowMaf$KOZAK_START) # No normal
wilcox.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION, paired = F, conf.level = 0.95) # Distribuciones diferentes
wilcox.test(highMaf$KOZAK_START, lowMaf$KOZAK_START, paired = F, conf.level = 0.95) # Distribuciones iguales
boxplot(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION)
boxplot(highMaf$KOZAK_START, lowMaf$KOZAK_START)
