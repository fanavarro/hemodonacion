setwd("/home/fabad/hemodonacion/src")
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
citation()
colnames(csv)
length(csv)
dim(csv)
nrow(csv)
signal_lost(csv)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
write(csv[i,])
}
}
signal_lost(csv)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
write(csv[i,1])
}
}
signal_lost(csv)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
write(csv[i,1],"", sep = "\t")
}
}
signal_lost(csv)
colnames(csv)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
write(csv[i,"SIGNAL_PEPTIDE_START"],"", sep = "\t")
}
}
signal_lost(csv)
colnames(csv)
View(csv)
csv[csv$SIGNAL_PEPTIDE_START != 0]
csv[csv$SIGNAL_PEPTIDE_START != 0,]
csv[csv$SIGNAL_PEPTIDE_START != 0 & !is.na(csv$SIGNAL_PEPTIDE_START),]
a=csv[csv$SIGNAL_PEPTIDE_START != 0]
a=csv[csv$SIGNAL_PEPTIDE_START != 0,]
!is.na(a)
a=!is.na(a)
a=csv[csv$SIGNAL_PEPTIDE_START != 0,]
a=csv[csv$SIGNAL_PEPTIDE_START != 0 & csv$SIGNAL_PEPTIDE_START != NA,]
a
a=csv[csv$SIGNAL_PEPTIDE_START != 0 ,]
a=csv[csv$SIGNAL_PEPTIDE_START != 0 ,]
a=na.exclude(a)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido señal.
signal_end = csv[i,"SIGNAL_PEPTIDE_END"] + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exaclty lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exaclty lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
}
signal_lost(csv)
View(csv)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido señal.
signal_end = csv[i,"SIGNAL_PEPTIDE_END"] + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exaclty lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exaclty lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
return(csv)
}
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = signal_lost(csv)
View(csv)
myvars <- c("FIRST_MET_POSITION", "SIGNAL_FIRST_MET_AFFECTED", "KOZAK_START", "SIGNAL_FIRST_KOZAK_AFFECTED")
View(csv[myvars])
myvars <- c("SIGNAL_PEPTIDE_START","FIRST_MET_POSITION", "SIGNAL_FIRST_MET_AFFECTED", "KOZAK_START", "SIGNAL_FIRST_KOZAK_AFFECTED")
View(csv[myvars])
myvars <- c("SIGNAL_PEPTIDE_START","SIGNAL_PEPTIDE_END","FIRST_MET_POSITION", "SIGNAL_FIRST_MET_AFFECTED", "KOZAK_START", "SIGNAL_FIRST_KOZAK_AFFECTED")
View(csv[myvars])
signal_lost = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido señal.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exaclty lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exaclty lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
return(csv)
}
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = signal_lost(csv)
View(csv[myvars])
debugSource('~/hemodonacion/src/statistics.R')
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = signal_lost(csv)
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = signal_lost(csv)
signal_lost = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido señal.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exaclty lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exaclty lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = signal_lost(csv)
View(csv[myvars])
signal_lost = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido señal.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
