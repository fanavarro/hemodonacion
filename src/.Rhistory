setwd("/home/fabad/hemodonacion/src")
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv = add_signal_lost_sup_info(csv)
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido se침al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
csv = add_signal_lost_sup_info(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
summary(lowMaf$FIRST_MET_POSITION)
summary(highMaf$FIRST_MET_POSITION)
summary(lowMaf$KOZAK_START)
summary(highMaf$KOZAK_START)
# Histogramas de la posici칩n de la primera metionina
hist(highMaf$FIRST_MET_POSITION, xlim = c(0,1000))
hist(lowMaf$FIRST_MET_POSITION, xlim = c(0,1000))
# Histogramas de la posici칩n de la metionina de la primera secuencia Kozak
# con puntuacion mayor a 25%
hist(highMaf$KOZAK_START)
hist(lowMaf$KOZAK_START)
# Comprobar homogeneidad de varianzas
var.test(highMaf$FIRST_MET_POSITION, lowMaf$FIRST_MET_POSITION) # Varianzas distintas
var.test(highMaf$KOZAK_START, lowMaf$KOZAK_START) # Varianzas iguales
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
summary(lowMaf$FIRST_MET_POSITION)
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(highMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(highMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(lowMaf$READING_FRAME_STATUS)
summary(highMaf$READING_FRAME_STATUS)
summary(highMaf$KOZAK_READING_FRAME_STATUS)
summary(highMaf$READING_FRAME_STATUS)
summary(lowMaf$READING_FRAME_STATUS)
summary(lowMaf$KOZAK_READING_FRAME_STATUS)
summary(highMaf$KOZAK_READING_FRAME_STATUS)
View(csv[csv$READING_FRAME_STATUS == 'Conserved',])
csv$MUTATED_SEQUENCE_LENGTH
csv$MUTATED_SEQUENCE_LENGTH[1]
as.numeric(csv$MUTATED_SEQUENCE_LENGTH)
as.numeric(csv$MUTATED_SEQUENCE_LENGTH[1])
as.double(csv$MUTATED_SEQUENCE_LENGTH[1])
chartr("%","",csv$MUTATED_SEQUENCE_LENGTH[1])
chartr("%","a",csv$MUTATED_SEQUENCE_LENGTH[1])
gsub("%","",csv$MUTATED_SEQUENCE_LENGTH[1])
gsub("%","",csv$MUTATED_SEQUENCE_LENGTH)
csv[,"MUTATED_SEQ_LENGTH2"]=gsub("%","",csv$MUTATED_SEQUENCE_LENGTH)
myvars=c("MUTATED_SEQ_LENGTH2", "MUTATED_SEQUENCE_LENGTH")
View(csv[myvars])
csv[,"MUTATED_SEQ_LENGTH2"]=factor(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
View(csv[myvars])
csv[,"MUTATED_SEQ_LENGTH2"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
View(csv[myvars])
View(csv[myvars])
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
summary(lowMaf$FIRST_MET_POSITION)
summary(lowMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(lowMaf$READING_FRAME_STATUS)
summary(highMaf$FIRST_MET_POSITION)
summary(highMaf$SIGNAL_FIRST_MET_AFFECTED)
summary(highMaf$READING_FRAME_STATUS)
summary(lowMaf$KOZAK_START)
summary(lowMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(lowMaf$KOZAK_READING_FRAME_STATUS)
summary(highMaf$KOZAK_START)
summary(highMaf$SIGNAL_FIRST_KOZAK_AFFECTED)
summary(highMaf$KOZAK_READING_FRAME_STATUS)
lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved']
lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved',]
View(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido se침al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
setwd("/home/fabad/hemodonacion/src")
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
# Obtener un conjunto en el que existe MAF definida y otro en el que no.
csvWithMaf = csv[!is.na(csv$MINOR_ALLELE_FREQUENCY),]
csvNoMaf = csv[is.na(csv$MINOR_ALLELE_FREQUENCY),]
# Dividir el subconjunto con MAF definida en MAF alta y baja
highMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY >= 0.01,]
lowMaf = csvWithMaf[csvWithMaf$MINOR_ALLELE_FREQUENCY < 0.01,]
# Resumen de cada subconjunto de datos segun la maf
lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved',]
summary(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
summary(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved',]$READING_FRAME_STATUS)
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 5 & lowMaf$READING_FRAME_STATUS == 'Conserved',]$READING_FRAME_STATUS)
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 3 & lowMaf$READING_FRAME_STATUS == 'Conserved',]$READING_FRAME_STATUS)
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]$READING_FRAME_STATUS)
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
length(lowMaf[lowMaf$READING_FRAME_STATUS == NA,])
lowMaf[lowMaf$READING_FRAME_STATUS == NA,]
length(lowMaf[is.na(lowMaf$READING_FRAME_STATUS,)])
length(lowMaf[lowMaf$READING_FRAME_STATUS == NA,])
length(lowMaf[is.na(lowMaf$READING_FRAME_STATUS),])
View(lowMaf[is.na(lowMaf$READING_FRAME_STATUS),])
lowMaf[is.na(lowMaf$READING_FRAME_STATUS),]
length(lowMaf[is.na(lowMaf$READING_FRAME_STATUS),])
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
length(lowMaf[is.na(lowMaf$READING_FRAME_STATUS),])
met_cons=length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
met_nocons=length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
summary(lowMaf$READING_FRAME_STATUS)
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
dim(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
length(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
dim(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
dim(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + length(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
summary(lowMaf$READING_FRAME_STATUS)
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
summary(lowMaf$READING_FRAME_STATUS)
summary(lowMaf$READING_FRAME_STATUS)
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$READING_FRAME_STATUS == 'Lost',])
nrow(lowMaf[highMaf$MUTATED_SEQUENCE_LENGTH > 1 & highMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[highMaf$MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$READING_FRAME_STATUS == 'Lost',])
summary(highMaf$READING_FRAME_STATUS)
nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH > 1 & highMaf$READING_FRAME_STATUS == 'Conserved',])
nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$READING_FRAME_STATUS == 'Lost',])
summary(lowMaf$KOZAK_READING_FRAME_STATUS)
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH > 1 & lowMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',])
nrow(lowMaf[lowMaf$MUTATED_SEQUENCE_LENGTH <= 1 & lowMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',]) + nrow(lowMaf[lowMaf$KOZAK_READING_FRAME_STATUS == 'Lost',])
nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH > 1 & highMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',])
nrow(highMaf[highMaf$MUTATED_SEQUENCE_LENGTH <= 1 & highMaf$KOZAK_READING_FRAME_STATUS == 'Conserved',]) + nrow(highMaf[highMaf$KOZAK_READING_FRAME_STATUS == 'Lost',])
