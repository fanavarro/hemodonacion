install.packages("xlsx")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
setwd("/home/fabad/hemodonacion/src")
add_signal_lost_sup_info = function(csv){
for (i in 1:nrow(csv)){
signal_start = csv[i,"SIGNAL_PEPTIDE_START"]
# Sumamos dos ya que en el csv se indica el inicio del ultimo codon
# De esta forma, signal_end tiene el nucleotido exacto donde
# termina el peptido seÃ±al.
signal_end = (csv[i,"SIGNAL_PEPTIDE_END"]) + 2
first_met = csv[i,"FIRST_MET_POSITION"]
first_kozak = csv[i,"KOZAK_START"]
signal_first_met_affected = NA
signal_first_kozak_affected = NA
if (!is.na(signal_start) && !is.na(signal_end)){
if(!is.na(first_met)){
if (first_met == signal_start){signal_first_met_affected = "Totally conserved"}
if (first_met > signal_start && first_met <= signal_end){signal_first_met_affected = "Partially conserved"}
if (first_met == (signal_end + 1)){signal_first_met_affected = "Exactly lost"}
if (first_met > (signal_end + 1)){signal_first_met_affected = "Lost"}
}
if (!is.na(first_kozak)){
if (first_kozak == signal_start){signal_first_kozak_affected = "Totally conserved"}
if (first_kozak > signal_start && first_kozak <= signal_end){signal_first_kozak_affected = "Partially conserved"}
if (first_kozak == (signal_end + 1)){signal_first_kozak_affected = "Exactly lost"}
if (first_kozak > (signal_end + 1)){signal_first_kozak_affected = "Lost"}
}
}
csv[i, "SIGNAL_FIRST_MET_AFFECTED"] = signal_first_met_affected
csv[i, "SIGNAL_FIRST_KOZAK_AFFECTED"] = signal_first_kozak_affected
}
return(csv)
}
add_mutation_type = function(csv){
for (i in 1:nrow(csv)){
codon_change = trimws(csv[i, "CODON_CHANGE"])
if (!is.na(codon_change) && "" != codon_change){
splitted = strsplit(codon_change, "/")
original = splitted[[1]][1]
mutated = splitted[[1]][2]
if(nchar(original) > nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Deletion"
} else if(nchar(original) < nchar(mutated)){
csv[i, "VARIATION_TYPE"] = "Insertion"
} else {
csv[i, "VARIATION_TYPE"] = "Nucleotid change"
}
}
}
return(csv)
}
# Leer el csv sin filtros
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_mutation_type(csv)
csv$READING_FRAME_STATUS = factor(csv$READING_FRAME_STATUS)
csv$KOZAK_READING_FRAME_STATUS = factor(csv$KOZAK_READING_FRAME_STATUS)
csv$KOZAK_STOP_CODON = factor(csv$KOZAK_STOP_CODON)
csv$STOP_CODON_POSITION = factor(csv$STOP_CODON_POSITION)
csv$GENE_NAME = factor(csv$GENE_NAME)
csv$SIGNAL_FIRST_MET_AFFECTED = factor(csv$SIGNAL_FIRST_MET_AFFECTED)
csv$SIGNAL_FIRST_KOZAK_AFFECTED = factor(csv$SIGNAL_FIRST_KOZAK_AFFECTED)
# Eliminar los casos en los que hay errores en las regiones 5' o 3'
csv = csv[csv$CDS_ERRORS == '',]
# Eliminar los casos en los que el biotipo es "non_stop_decay" o "nonsense_mediated_decay"
csv = csv[csv$TRANSCRIPT_BIOTYPE != 'non_stop_decay' & csv$TRANSCRIPT_BIOTYPE != 'nonsense_mediated_decay',]
# Numero de genes con mutaciones afectando en el codon de inicio
length(unique(csv$GENE_NAME))
View(table(csv$GENE_NAME))
View(table(csv$VARIATION_TYPE))
library(gdata)
library(hash)
library(descr)
search = function(database, xls){
found = data.frame(matrix(ncol=ncol(database)))
colnames(found) = colnames(database)
# Si el xlsx tiene entrada para dbsnp e id de refseq
if("dbsnp" %in% colnames(xls) && "transcript" %in% colnames(xls)){
for (i in 1:nrow(xls)){
dbsnp = toString(xls[i, "dbsnp"])
refseq_id = toString(xls[i,"transcript"])
entry = database[database$TRANSCRIPT_REFSEQ_ID == refseq_id & !is.na(database$TRANSCRIPT_REFSEQ_ID) & database$VARIATION_NAME == dbsnp & !is.na(database$VARIATION_NAME), ]
if (nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
# Si tiene id de transcrito de ensembl y cambio de nucleotido del tipo aTg/aAg
else if("Feature" %in% colnames(xls) && "Codons" %in% colnames(xls)){
for (i in 1:nrow(xls)){
transcript_id = xls[i, "Feature"]
codon_change = xls[i,"Codons"]
entry = database[database$TRANSCRIPT_ID == transcript_id & !is.na(database$TRANSCRIPT_ID) & database$CODON_CHANGE == codon_change & !is.na(database$CODON_CHANGE), ]
if(nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
return(found)
}
filter_xls = function(xls){
minCoverage = 20
minQuality = 60
# Filter the position affected by the mutation
if("proteinPos" %in% colnames(xls)){
xls = xls[xls$proteinPos == 1,]
} else if ("Protein_position" %in% colnames(xls)){
xls = xls[xls$Protein_position == 1,]
} else if ("protein" %in% colnames(xls)){
index = with(xls, grepl("p.Met1[a-zA-Z]", protein))
xls = xls[index,]
}
# Filter by coverage and quality
if ("coverage" %in% colnames(xls)){
xls = xls[xls$coverage >= minCoverage,]
} else if ("QUAL" %in% colnames(xls)){
xls = xls[xls$QUAL >= minQuality,]
}
return(xls)
}
get_gene_names = function(xls){
if("gene" %in% colnames(xls)){
return(sort(xls$gene))
} else if("GeneSymbol" %in% colnames(xls)){
return(sort(xls$GeneSymbol))
} else if("Gene.Name" %in% colnames(xls)){
return(sort(xls$Gene.Name))
}
}
exomes_dir = "/home/fabad/hemodonacion/data/exomes/"
exome_files = c("14-173.xlsx",
"2064.xlsx",
"ABGP.xlsx",
"Exoma 10-164.xlsx",
"Exoma 11-584.xlsx",
"Exoma 2166 nuevo.xlsx",
"Paqui.xlsx")
exome_tables = hash()
# Read xlsx files and store it in a hash
for (file in exome_files){
abs_file_dir = paste(exomes_dir, file, sep="")
exome_tables[file] = read.xls(abs_file_dir)
write(paste("exoma", file, "leido."), "")
}
for (file in exome_files){
exome_tables[file] = filter_xls(exome_tables[[file]])
}
# get genes
genes = c()
for (file in exome_files){
genes = c(genes, as.vector(get_gene_names(exome_tables[[file]])))
}
View(exome_tables[["14-173.xlsx"]])
length(exome_tables[["14-173.xlsx"]])
nrow(exome_tables[["14-173.xlsx"]])
nrow(exome_tables[["14-173.xlsx"]])
View(search(csv, exome_tables[["14-173.xlsx"]]))
View(csv)
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
View(search(csv, exome_tables[["14-173.xlsx"]]))
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
View(search(csv, exome_tables[["14-173.xlsx"]]))
search = function(database, xls){
found = data.frame(matrix(ncol=ncol(database)))
colnames(found) = colnames(database)
# Si el xlsx tiene entrada para dbsnp e id de refseq
if("dbsnp" %in% colnames(xls) && "transcript" %in% colnames(xls)){
for (i in 1:nrow(xls)){
dbsnp = toString(xls[i, "dbsnp"])
refseq_id = toString(xls[i,"transcript"])
entry = database[database$TRANSCRIPT_REFSEQ_ID == refseq_id & !is.na(database$TRANSCRIPT_REFSEQ_ID) & database$VARIATION_NAME == dbsnp & !is.na(database$VARIATION_NAME), ]
if (!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
# Si tiene id de transcrito de ensembl y cambio de nucleotido del tipo aTg/aAg
else if("Feature" %in% colnames(xls) && "Codons" %in% colnames(xls)){
for (i in 1:nrow(xls)){
transcript_id = xls[i, "Feature"]
codon_change = xls[i,"Codons"]
entry = database[database$TRANSCRIPT_ID == transcript_id & !is.na(database$TRANSCRIPT_ID) & database$CODON_CHANGE == codon_change & !is.na(database$CODON_CHANGE), ]
if(!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
return(found)
}
search = function(database, xls){
found = data.frame(matrix(ncol=ncol(database)))
colnames(found) = colnames(database)
# Si el xlsx tiene entrada para dbsnp e id de refseq
if("dbsnp" %in% colnames(xls) && "transcript" %in% colnames(xls)){
for (i in 1:nrow(xls)){
dbsnp = toString(xls[i, "dbsnp"])
refseq_id = toString(xls[i,"transcript"])
entry = database[database$TRANSCRIPT_REFSEQ_ID == refseq_id & !is.na(database$TRANSCRIPT_REFSEQ_ID) & database$VARIATION_NAME == dbsnp & !is.na(database$VARIATION_NAME), ]
if (!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
# Si tiene id de transcrito de ensembl y cambio de nucleotido del tipo aTg/aAg
else if("Feature" %in% colnames(xls) && "Codons" %in% colnames(xls)){
for (i in 1:nrow(xls)){
transcript_id = xls[i, "Feature"]
codon_change = xls[i,"Codons"]
entry = database[database$TRANSCRIPT_ID == transcript_id & !is.na(database$TRANSCRIPT_ID) & database$CODON_CHANGE == codon_change & !is.na(database$CODON_CHANGE), ]
if(!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
return(found)
}
View(search(csv, exome_tables[["14-173.xlsx"]]))
found = data.frame(matrix(ncol=ncol(database)))
found = data.frame(matrix(ncol=5)
)
colnames(found)=c("a","b","c","d","e")
View(found)
search = function(database, xls){
#found = data.frame(matrix(ncol=ncol(database)))
#colnames(found) = colnames(database)
found = read.table(text="", col.names = colnames(database))
# Si el xlsx tiene entrada para dbsnp e id de refseq
if("dbsnp" %in% colnames(xls) && "transcript" %in% colnames(xls)){
for (i in 1:nrow(xls)){
dbsnp = toString(xls[i, "dbsnp"])
refseq_id = toString(xls[i,"transcript"])
entry = database[database$TRANSCRIPT_REFSEQ_ID == refseq_id & !is.na(database$TRANSCRIPT_REFSEQ_ID) & database$VARIATION_NAME == dbsnp & !is.na(database$VARIATION_NAME), ]
if (!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
# Si tiene id de transcrito de ensembl y cambio de nucleotido del tipo aTg/aAg
else if("Feature" %in% colnames(xls) && "Codons" %in% colnames(xls)){
for (i in 1:nrow(xls)){
transcript_id = xls[i, "Feature"]
codon_change = xls[i,"Codons"]
entry = database[database$TRANSCRIPT_ID == transcript_id & !is.na(database$TRANSCRIPT_ID) & database$CODON_CHANGE == codon_change & !is.na(database$CODON_CHANGE), ]
if(!is.na(entry) && nrow(entry) != 0){
found = rbind(found, entry)
}
}
}
return(found)
}
View(search(csv, exome_tables[["14-173.xlsx"]]))
View(exome_tables[["2064.xlsx"]])
View(search(csv, exome_tables[["2064.xlsx"]]))
View(search(csv, exome_tables[["ABGP.xlsx"]]))
View(exome_tables[["ABGP.xlsx"]])
View(exome_tables[["Exoma 10-164.xlsx"]])
View(search(csv, exome_tables[["Exoma 10-164.xlsx"]]))
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = read.csv("final_out_no_filter.csv", sep="\t",stringsAsFactors=FALSE)
csv[,"MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$MUTATED_SEQUENCE_LENGTH))
csv[,"KOZAK_MUTATED_SEQUENCE_LENGTH"]=as.numeric(gsub("%","",csv$KOZAK_MUTATED_SEQUENCE_LENGTH))
csv = add_signal_lost_sup_info(csv)
csv = add_mutation_type(csv)
View(search(csv, exome_tables[["Exoma 11-584.xlsx"]]))
View(exome_tables[["Exoma 11-584.xlsx"]])
View(exome_tables[["Exoma 2166 nuevo.xlsx"]])
View(search(csv, exome_tables[["Exoma 2166 nuevo.xlsx"]]))
View(search(csv, exome_tables[["Paqui.xlsx"]]))
View(exome_tables[["Paqui.xlsx"]])
View(search(csv, exome_tables[["14-173.xlsx"]]))
View(search(csv, exome_tables[["2064.xlsx"]]))
View(search(csv, exome_tables[["ABGP.xlsx"]]))
View(search(csv, exome_tables[["Exoma 10-164.xlsx"]]))
View(search(csv, exome_tables[["Exoma 11-584.xlsx"]]))
View(search(csv, exome_tables[["Exoma 2166 nuevo.xlsx"]]))
View(search(csv, exome_tables[["Paqui.xlsx"]]))
