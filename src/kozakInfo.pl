#!/usr/bin/perl -w -- 
#
# generated by wxGlade 0.6.8 on Sun Jul 10 20:29:17 2016
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use warnings;
use myUtils::KozakUtils;
use Bio::EnsEMBL::Registry;

#####popup#####
package KozakPopup;
use strict ;
use Wx qw[:everything];
use base qw(Wx::Dialog);

sub new{
    my( $self, $parent, $id, $title, $pos, $size, $style, $name, $kozak_info ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;
        
     $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
     $self->{kozak_info} = $kozak_info;
     
     $self->{label_start} = Wx::StaticText->new($self, -1, "Start position:",);
     $self->{start_pos} = Wx::StaticText->new($self, -1, $kozak_info->{START},);
     
     $self->{label_end} = Wx::StaticText->new($self, -1, "End position:",);
     $self->{end_pos} = Wx::StaticText->new($self, -1, $kozak_info->{FINISH},);
     
     $self->{label_stop_codon} = Wx::StaticText->new($self, -1, "Stop codon found:",);
     $self->{stop_codon} = Wx::StaticText->new($self, -1, $kozak_info->{STOP_CODON},);
     
     $self->{label_frame} = Wx::StaticText->new($self, -1, "Frame:",);
     $self->{frame} = Wx::StaticText->new($self, -1, $kozak_info->{FRAME},);
     
     $self->{label_aa_length} = Wx::StaticText->new($self, -1, "Aminoacid length:",);
     $self->{aa_length} = Wx::StaticText->new($self, -1, $kozak_info->{ORF_AMINOACID_LENGTH},);
     
     $self->{label_reliability} = Wx::StaticText->new($self, -1, "Reliability:",);
     $self->{reliability} = Wx::StaticText->new($self, -1, $kozak_info->{RELIABILITY},);
     
     $self->{label_identity} = Wx::StaticText->new($self, -1, "Kozak identity:",);
     $self->{identity} = Wx::StaticText->new($self, -1, $kozak_info->{KOZAK_IDENTITY},);
     
    $self->__set_properties();
    $self->__do_layout();
     
     return $self;
}

sub __set_properties {
    my $self = shift;
    # begin wxGlade: MyFrame::__set_properties
    $self->SetTitle("Kozak Properties");
    $self->SetSize(Wx::Size->new(300, 300));
    # end wxGlade
}

sub __do_layout{
    my $self = shift;
    $self->{gridsizer} = Wx::GridSizer->new( 7, 2, 5, 5 );
    
    $self->{gridsizer}->Add($self->{label_start}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{start_pos}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->{gridsizer}->Add($self->{label_end}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{end_pos}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->{gridsizer}->Add($self->{label_stop_codon}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{stop_codon}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->{gridsizer}->Add($self->{label_frame}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{frame}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->{gridsizer}->Add($self->{label_aa_length}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{aa_length}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->{gridsizer}->Add($self->{label_reliability}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{reliability}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->{gridsizer}->Add($self->{label_identity}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    $self->{gridsizer}->Add($self->{identity}, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL );
    
    $self->SetSizer($self->{gridsizer});
    $self->Layout();
}
##############

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;
use Wx::Locale gettext => '_T';

my $MAX_KOZAK_RESULTS = 50000;
my $LENGTH_PER_LINE = 50;
sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{gene_name_input} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{button} = Wx::Button->new($self, wxID_ANY, _T("Go!"));
    $self->{results} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY|wxHSCROLL);
    $self->{registry} = 'Bio::EnsEMBL::Registry';
    $self->{registry} ->load_registry_from_db(
        -host => 'ensembldb.ensembl.org',
        -user => 'anonymous',
    );
    $self->{gene_adaptor}  = $self->{registry}->get_adaptor('human', 'core', 'gene');
    $self->{transcript_adaptor}  = $self->{registry}->get_adaptor('human', 'core', 'Transcript');

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button}->GetId, \&button_handler);
    Wx::Event::EVT_LEFT_UP($self->{results}, \&results_handler);

    # end wxGlade
    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: MyFrame::__set_properties
    $self->SetTitle(_T("Kozak Info"));
    $self->SetSize(Wx::Size->new(654, 573));
    $self->{gene_name_input}->SetMinSize(Wx::Size->new(130, 27));
    $self->{gene_name_input}->SetToolTipString(_T("Insert gene name"));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: MyFrame::__do_layout
    $self->{main_sizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_1} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{gene_name_sizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{gene_name_sizer}->Add($self->{gene_name_input}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{gene_name_sizer}->Add($self->{button}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{main_sizer}->Add($self->{gene_name_sizer}, 1, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_1}->Add($self->{results}, 1, wxALL|wxEXPAND, 0);
    $self->{main_sizer}->Add($self->{sizer_1}, 3, wxEXPAND, 0);
    $self->SetSizer($self->{main_sizer});
    $self->Layout();
    # end wxGlade
}

sub button_handler {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::button_handler <event_handler>
    
    my $geneName = $self->{gene_name_input}->GetValue();
    my @genes = @{$self->{gene_adaptor}->fetch_all_by_external_name($geneName)};
    my $cdna;
    if (scalar (@genes) > 0){
        my $gene = $genes[0];
        my @transcripts = @{$self->{transcript_adaptor}->fetch_all_by_Gene($gene)};
        # Find canonical transcript
        my $transcript = undef;
        for (my $i = 0; $i < scalar(@transcripts); $i++){
            if($transcripts[$i]->is_canonical()){
                $transcript = $transcripts[$i];
                last;
            }
        }
        if(defined($transcript)){
            $cdna = $transcript->seq->seq;
            my $cds = $transcript->translateable_seq;
            my $protein_start_pos = index($cdna, $cds);
            $protein_start_pos += (int($protein_start_pos/($LENGTH_PER_LINE - 1 )));
            my $kozak_positions = myUtils::KozakUtils::get_kozak_info($cdna, $MAX_KOZAK_RESULTS);
            # Store kozak positions in the object
            $self->{kozak_positions} = $kozak_positions;
            
            # set sequence in textctrl
            $self->{results}->SetValue( format_sequence($cdna));
            
            # Paint the ATG that indicates the start of translation.
            $self->{results}->SetStyle($protein_start_pos , $protein_start_pos + 3, Wx::TextAttr->new( Wx::Colour->new( 255, 15, 255 ),Wx::Colour->new( 0, 255, 0 ) ));
            
            # Paint kozak positions
            foreach my $kozak_position (@{$kozak_positions}){
                my $kozak_start = $kozak_position->{START};
                $kozak_start = $kozak_start + (int($kozak_start/($LENGTH_PER_LINE - 1)));
                if ($kozak_start != $protein_start_pos){
                    my $kozak_reliability = $kozak_position->{RELIABILITY};
                    $self->{results}->SetStyle( $kozak_start ,  $kozak_start + 3, Wx::TextAttr->new( Wx::Colour->new( 255, 15, 255 ),Wx::Colour->new( POSIX::floor($kozak_reliability * 255),0, 0 ) ));
                }
            }
        }
    } else{
        $self->{results}->SetValue( "Gene $geneName not found");
    }
    # end wxGlade
}

sub results_handler{
    my ($self, $event) = @_;
    my $parent = $self->GetParent();
    my $position = $event->GetPosition();
    my ($res, $col, $row) = $self->HitTest($position);
    # Print row and col position
    print "($row,$col)\n";
    # Calc linear position
    my $click_pos = ($row * ($LENGTH_PER_LINE - 1)) + $col;
    print $click_pos ."\n";
    
    # Check if a kozak position has been clicked
    my $kozak_positions = $parent->{kozak_positions};
    foreach my $kozak_position (@{$kozak_positions}){
        my $kozak_position_start = $kozak_position->{START};
        my $kozak_position_end= $kozak_position->{START} + 3;
        if ($click_pos >= $kozak_position_start && $click_pos <= $kozak_position_end){
            print "Kozak Clicked!!\n";
            my $popup = KozakPopup->new($parent, -1, undef, undef, undef, undef, undef, $kozak_position);
            $popup->Show(1);
        }
    }
}

sub format_sequence{
    my $seq = shift;
    
    for(my $i = $LENGTH_PER_LINE - 1; $i < length($seq); $i = $i + $LENGTH_PER_LINE){
        substr($seq, $i, 0) = "\n";
    }
    return $seq;
}
# end of class MyFrame

1;

1;

package main;

unless(caller){
    my $local = Wx::Locale->new("C", "C", "C"); # replace with ??
    $local->AddCatalog("app"); # replace with the appropriate catalog name

    local *Wx::App::OnInit = sub{1};
    my $app = Wx::App->new();
    Wx::InitAllImageHandlers();

    my $KozakInfo = MyFrame->new();

    $app->SetTopWindow($KozakInfo);
    $KozakInfo->Show(1);
    $app->MainLoop();
}

