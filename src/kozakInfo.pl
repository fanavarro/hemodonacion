#!/usr/bin/perl -w -- 
#
# generated by wxGlade 0.6.8 on Sun Jul 10 20:29:17 2016
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use warnings;
use myUtils::KozakUtils;
use Bio::EnsEMBL::Registry;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;

use Wx::Locale gettext => '_T';
sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{gene_name_input} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{button} = Wx::Button->new($self, wxID_ANY, _T("Go!"));
    $self->{results} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY|wxHSCROLL);
    $self->{registry} = 'Bio::EnsEMBL::Registry';
    $self->{registry} ->load_registry_from_db(
        -host => 'ensembldb.ensembl.org',
        -user => 'anonymous',
    );
    $self->{gene_adaptor}  = $self->{registry}->get_adaptor('human', 'core', 'gene');
    $self->{transcript_adaptor}  = $self->{registry}->get_adaptor('human', 'core', 'Transcript');

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button}->GetId, \&button_handler);
    Wx::Event::EVT_LEFT_UP($self->{results}, \&results_handler);

    # end wxGlade
    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: MyFrame::__set_properties
    $self->SetTitle(_T("Kozak Info"));
    $self->SetSize(Wx::Size->new(654, 573));
    $self->{gene_name_input}->SetMinSize(Wx::Size->new(130, 27));
    $self->{gene_name_input}->SetToolTipString(_T("Insert gene name"));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: MyFrame::__do_layout
    $self->{main_sizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_1} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{gene_name_sizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{gene_name_sizer}->Add($self->{gene_name_input}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{gene_name_sizer}->Add($self->{button}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{main_sizer}->Add($self->{gene_name_sizer}, 1, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_1}->Add($self->{results}, 1, wxALL|wxEXPAND, 0);
    $self->{main_sizer}->Add($self->{sizer_1}, 3, wxEXPAND, 0);
    $self->SetSizer($self->{main_sizer});
    $self->Layout();
    # end wxGlade
}

sub button_handler {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::button_handler <event_handler>
    
    my $geneName = $self->{gene_name_input}->GetValue();
    my @genes = @{$self->{gene_adaptor}->fetch_all_by_external_name($geneName)};
    my $cdna;
    if (scalar (@genes) > 0){
        my $gene = $genes[0];
        my @transcripts = @{$self->{transcript_adaptor}->fetch_all_by_Gene($gene)};
        my $transcript = undef;
        for (my $i = 0; $i < scalar(@transcripts); $i++){
            if($transcripts[$i]->is_canonical()){
                $transcript = $transcripts[$i];
                last;
            }
        }
        if(defined($transcript)){
            $cdna = $transcript->seq->seq;
            my $cds = $transcript->translateable_seq;
            my $protein_start_pos = index($cdna, $cds);
            $self->{results}->SetValue( $cdna);
             $self->{results}->SetStyle($protein_start_pos , $protein_start_pos + 3, Wx::TextAttr->new( Wx::Colour->new( 255, 15, 255 ),Wx::Colour->new( 1, 15, 100 ) ));
        }
    } else{
        $self->{results}->SetValue( "Gene $geneName not found");
    }
    # end wxGlade
}

sub results_handler{
    my ($self, $event) = @_;
    my $position = $event->GetPosition();
    my ($res, $col, $row) = $self->HitTest($position);
    #my ($col, $line) = $self->{results}->PositionToXY($hitpos);
    print "($row,$col)\n";
}


# end of class MyFrame

1;

1;

package main;

unless(caller){
    my $local = Wx::Locale->new("English", "en", "en"); # replace with ??
    $local->AddCatalog("app"); # replace with the appropriate catalog name

    local *Wx::App::OnInit = sub{1};
    my $app = Wx::App->new();
    Wx::InitAllImageHandlers();

    my $KozakInfo = MyFrame->new();

    $app->SetTopWindow($KozakInfo);
    $KozakInfo->Show(1);
    $app->MainLoop();
}

